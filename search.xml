<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title> js特效之瀑布流</title>
      <link href="/blog/2018/08/24/js%E7%89%B9%E6%95%88%E4%B9%8B%E7%80%91%E5%B8%83%E6%B5%81/"/>
      <url>/blog/2018/08/24/js%E7%89%B9%E6%95%88%E4%B9%8B%E7%80%91%E5%B8%83%E6%B5%81/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>js中的特效部分真的挺有意思，不需要篇幅过长的代码就可以写出一个小玩意儿来获得内心得一点点成就感，而且还可以加入一些自己的想法和设计，这篇文章记录下我封装的实现瀑布流的方法</p><h1 id="何为瀑布流"><a href="#何为瀑布流" class="headerlink" title="何为瀑布流"></a>何为瀑布流</h1><p>说白了就是一堆照片的排列，但这些照片的排列是有一定规则的，语言表达能力差，show you the picture:</p><figure class="image-box">                <img src="1.png" alt="" title="" class="">                <p></p>            </figure><p>so,can you see that? 我都看出特点了，各位一定也能看出来，我们总结一下这些图片的<code>规律</code>：</p><ul><li><strong>宽度相同</strong></li><li><strong>高度不同</strong></li><li><strong>排列特别整齐</strong></li></ul><h1 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a>实现逻辑</h1><p>瀑布流效果的实现逻辑非常简单，我大致给它分为如下几点：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">先准备二十张高度不相同，宽度相同（可以自己设置）的照片（废话！）；</span><br><span class="line">首先我们先准备一个父元素box，给它设置宽度高度然后将其居中，我们的所有照片就在这个box中乖乖排列</span><br><span class="line">第一步： 计算一行放多少张照片</span><br><span class="line">第二步： 遍历所有照片，把第一行照片的高度存入一个数组当中</span><br><span class="line">第三步： 求出第一行照片的最低高度，把第二行的第一张照片放它屁股后面</span><br><span class="line">第四步： 更改数组中刚才求出的最低高度的数据为：最低高度+第二行第一张照片的高度</span><br></pre></td></tr></table></figure></p><p>下面<code>show the code</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">//这是外层容器</span></span><br><span class="line"><span class="keyword">let</span> bigbox = <span class="built_in">document</span>.querySelector(<span class="string">".box"</span>);</span><br><span class="line"><span class="comment">//这是所有图片</span></span><br><span class="line"><span class="keyword">let</span> smallbox = <span class="built_in">document</span>.querySelectorAll(<span class="string">".sbox"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> findindex = <span class="function">(<span class="params">arr,min</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] === min)&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> waterfull = <span class="function">(<span class="params">parent,child</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;smallbox.length;i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> bwidth = bigbox.offsetWidth;</span><br><span class="line">            <span class="keyword">let</span> swidth = smallbox[<span class="number">0</span>].offsetWidth;</span><br><span class="line">        <span class="comment">//这是第一步</span></span><br><span class="line">        <span class="keyword">let</span> column = <span class="built_in">parseInt</span>(bwidth/swidth);</span><br><span class="line">        <span class="comment">//margin是为了每张图片的左侧和底侧 距离下张图片有一定距离</span></span><br><span class="line">        <span class="keyword">let</span> margin = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">let</span> minArr= [];</span><br><span class="line">        <span class="keyword">let</span> sheight = smallbox[i].offsetHeight + margin;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;column)&#123;</span><br><span class="line">            <span class="comment">//这是第二步</span></span><br><span class="line">            minArr.push(sheight);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            smallbox[i].style.position = <span class="string">"absolute"</span>;</span><br><span class="line">            <span class="comment">//这是第三步</span></span><br><span class="line">            <span class="keyword">let</span> minHeight = <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>,minArr);</span><br><span class="line">            <span class="comment">//找出最小值的索引</span></span><br><span class="line">            <span class="keyword">let</span> minindex = findindex(minArr,minHeight);</span><br><span class="line">            smallbox[i].style.left = minindex * (swidth+margin) + <span class="string">'px'</span>;</span><br><span class="line">            smallbox[i].style.top = minHeight + <span class="string">'px'</span>;</span><br><span class="line">            <span class="comment">//这是第四步</span></span><br><span class="line">            minArr[minindex]+= sheight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">waterfull(bigbox,smallbox);</span><br></pre></td></tr></table></figure><p>OK搞定，下次遇到使用瀑布流的地方只要调用<code>waterfull()</code>函数，把图片的外层容器，和装着所有图片的数组传进去即可！</p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> javascript </category>
          
          <category> 特效 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> javascript </tag>
            
            <tag> 特效 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js中的原型链，prototype和和_proto_的关系</title>
      <link href="/blog/2018/08/19/js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%EF%BC%8Cprototype%E5%92%8C%E5%92%8C-proto-%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/blog/2018/08/19/js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%EF%BC%8Cprototype%E5%92%8C%E5%92%8C-proto-%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      <content type="html"><![CDATA[<p>原型链是实现继承的主要方式，其基本思想就是利用原型链让一个引用类型继承另一个引用类型的属性和方法；举个栗子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">Person.prototype.Say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Person say"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Man = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Man.prototype = <span class="keyword">new</span> Person();<span class="comment">//这句是重点</span></span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Man();</span><br><span class="line">man.Say();  <span class="comment">//Person say</span></span><br></pre></td></tr></table></figure></p><p>那么<code>Man.prototype = new Person();</code>这句话是如何实现继承的呢？在回答这个问题之前，我们先来看看<code>new</code>的过程中的发生了什么：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">Person.prototype.Say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Person say"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.Say();</span><br></pre></td></tr></table></figure></p><p>我们可以把new的过程拆分成以下三步：</p><ul><li><p>var p={}; 也就是说，初始化一个对象p。</p></li><li><p>p.<strong>proto</strong>=Person.prototype;</p></li><li><p>Person.call(p);也就是说构造p，也可以称之为初始化p。</p></li></ul><p>最重要的是第二点，其实每个对象的内部都有一个<em>proto</em>对象，在<code>new</code>的过程中，实例对象<code>p</code>内部的<strong>proto</strong>属性就会指向构造函数内部的prototype属性,当调用<code>p.Say()</code>方法时，会先去p内部找<code>Say()</code>方法，如果找不到则会去找<em>proto</em>对象，而此时的<em>proto</em>对象正指向构造函数内部的prototype属性,所有就会去构造函数内部的prototype属性内部找；</p><p>这点明白以后我们再回去看开头那个栗子，<br>类比<code>var p = new Person();</code>这句话，刚才我们说p内部的<em>proto</em>属性会指向构造函数内部的prototype属性，<code>Man.prototype = new Person();</code>这句话内部发生了什么呢？没错Man.prototype内部的<em>proto</em>属性会指向构造函数内部的prototype属性；</p><p>当我们调用man.Say()方法时，会先去man内部找，man内部找不到再去man内部的<em>proto</em>对象找，<em>proto</em>对象指向Man.prototype,再在这里面找，还找不到，再找<em>proto</em>(Man.prototype内部的),<br>而此时Man.prototype内部的<em>proto</em>属性正指向父类的构造函数的prototype，再继续寻找下去，直到找到为止；</p><p><strong>这也就是原型链的实现原理。最后，其实prototype只是一个假象，他在实现原型链中只是起到了一个辅助作用，换句话说，他只是在new的时候有着一定的价值，而原型链的本质，其实在于<strong>proto</strong>！</strong></p><blockquote><p><strong>proto</strong>、prototype傻傻分不清楚？ 记住以下两点:<br><strong>proto</strong>是每个对象都有的一个属性，而prototype是函数才会有的属性。<br><strong>proto</strong>指向的是当前对象的原型对象，而prototype指向的，是以当前函数作为构造函数构造出来的对象的原型对象;</p></blockquote>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6语法之箭头函数</title>
      <link href="/blog/2018/08/14/ES6%E8%AF%AD%E6%B3%95%E4%B9%8B%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
      <url>/blog/2018/08/14/ES6%E8%AF%AD%E6%B3%95%E4%B9%8B%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>  使用ES6箭头函数也有一小段时间了，虽然用起来特别简洁和方便，但是里面的一些雷区老是踩到，今天又系统的学习了一下，这篇笔记主要记录箭头函数里的this指向问题还有箭头函数的使用禁区，也方便以后查阅和复习；</p><hr><h1 id="箭头函数使用注意点"><a href="#箭头函数使用注意点" class="headerlink" title="箭头函数使用注意点"></a>箭头函数使用注意点</h1>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">函数体内的<span class="keyword">this</span>对象，就是定义时所在的对象，而不是使用时所在的对象。</span><br><span class="line">不可以当作构造函数（内部没有<span class="keyword">this</span>指针），也就是说，不可以使用<span class="keyword">new</span>命令。</span><br><span class="line">不可以使用<span class="built_in">arguments</span>对象，该对象在函数体内不存在。如果要用，可以用rest参数代替。</span><br><span class="line">不可以使用<span class="keyword">yield</span>命令，因此箭头函数不能用作Generator函数。</span><br></pre></td></tr></table></figure><p>今天重点来记录一下第一条。</p><h2 id="关于this对象"><a href="#关于this对象" class="headerlink" title="关于this对象"></a>关于this对象</h2><p>先来看下ES5中的this对象<code>js高级程序设计（第三版）</code>里有这么个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"My obj"</span>,</span><br><span class="line">     getNameFunc :<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.getNameFunc()()); <span class="comment">//The Window</span></span><br></pre></td></tr></table></figure></p><p>有人会认为输出“My obj”,但其实事实是：匿名函数的执行环境具有全局性，因此此<code>this</code>指向<code>window</code>；</p><p><strong>看一下书上的解决方案</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"My obj"</span>,</span><br><span class="line">     getNameFunc :<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> that.name</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.getNameFunc()()); <span class="comment">// My obj,</span></span><br></pre></td></tr></table></figure></p><p>通过缓存this，就可以拿到期待的结果。但是这样确实有点麻烦，箭头函数便可以很好的解决这个问题；<br>看下面栗子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"My obj"</span>,</span><br><span class="line">     getNameFunc :<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.getNameFunc()()); <span class="comment">// My obj,</span></span><br></pre></td></tr></table></figure></p><p>用箭头函数为什么可以解决呢？其实箭头函数内部是不绑定this的，也就是说它<strong>根本没有自己的this</strong>，它内部的this就是外层代码块的this；</p><p><strong>小结</strong></p><blockquote><p>箭头函数中没有this，在箭头函数内部使用this，是使用的外层代码块的this。</p></blockquote><hr><h1 id="箭头函数使用禁忌"><a href="#箭头函数使用禁忌" class="headerlink" title="箭头函数使用禁忌"></a>箭头函数使用禁忌</h1><h2 id="对象字面量中使用"><a href="#对象字面量中使用" class="headerlink" title="对象字面量中使用"></a>对象字面量中使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line">       array: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       sum: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// true</span></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>.array.reduce(<span class="function">(<span class="params">result, item</span>) =&gt;</span> result + item);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   </span><br><span class="line">   foo.sum();<span class="comment">// Throws"TypeError: Cannot read property 'reduce' of undefined"</span></span><br></pre></td></tr></table></figure><p>在这个栗子中，this是取不到array的，上面咱们说过箭头函数内部的this就是外层代码块的this，有人会想，外层代码块这不是<code>foo</code>么，怎么取不到了，这里有个注意点：<strong>对象的一对大括号是构不成代码块的</strong>，所以外层代码块的this就是window，这也是为什么（this===window）打印<code>true</code>的原因，要想取到array的话只能乖乖使用传统<code>function</code>了；</p><h2 id="在对象原型中使用"><a href="#在对象原型中使用" class="headerlink" title="在对象原型中使用"></a>在对象原型中使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">this</span>.Name = name;</span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype.sayName = <span class="function"><span class="params">()</span> =&gt;</span> &#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.Name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">'wc'</span>);  </span><br><span class="line">cat.sayName(); <span class="comment">// =&gt; undefined</span></span><br></pre></td></tr></table></figure><p>原理同上，这里的this同样指向window，使用传统方式即可正常工作</p><h2 id="回调函数中使用"><a href="#回调函数中使用" class="headerlink" title="回调函数中使用"></a>回调函数中使用</h2><p>在dom元素上绑定事件监听函数是非常普遍的行为，在dom事件被触发时，回调函数中的this指向该dom,可当我们使用箭头函数时：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">button.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="keyword">this</span>.innerHTML = <span class="string">'Clicked button'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>毫无疑问，箭头函数是一个很棒的特性,但有一些情况下，使用箭头函数也有一些不便，不能在对象字面量中使用，不能再对象原型中使用，不能用作回调函数，内部没有this不能用作构造函数等等。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> ES6语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> ES6语法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo+Coding搭建个人博客及绑定个人域名</title>
      <link href="/blog/2018/08/11/Hexo-Coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%8F%8A%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"/>
      <url>/blog/2018/08/11/Hexo-Coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%8F%8A%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/</url>
      <content type="html"><![CDATA[<p>关于这个主题<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">hexo官方文档</a>上说的很详细，但还是很难仅通过一篇文章就能过一口气完美搭建，中间还是踩到不少雷（一把辛酸泪），所以还是想拿这篇文章来记录下。<br><a id="more"></a></p><hr><h1 id="技术博客的选择"><a href="#技术博客的选择" class="headerlink" title="技术博客的选择"></a>技术博客的选择</h1><p>现在网上很多的教程都是基于<strong>hexo+github</strong>的，包括我之前也是托管在Github Pages上面，但是由于是国外服务器所以访问起来有点慢（其实相当慢，我会瞎说？）于是朝coding投怀送抱，支持下国产。</p><h1 id="安装必要依赖"><a href="#安装必要依赖" class="headerlink" title="安装必要依赖"></a>安装必要依赖</h1><p>这两个环境直接下载安装就行了，应该不会有什么大问题</p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://gitforwindows.org/" target="_blank" rel="noopener">Git</a></li></ul><h1 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h1><p>安装好git以及node.js之后，在电脑的任意盘里新建一个空文件夹，命名随意(比如<code>blog</code>)，最好是纯英文。然后打开这个空文件夹，鼠标右键选择Git Bash。</p><p>输入以下一下命令安装Hexo<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br><span class="line">可能会安装失败（这是我遇到的第一个坑），安装失败选择下边这种方式(淘宝源安装):</span><br><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org`**</span></span><br><span class="line">cnpm install hexo-cli -g</span><br><span class="line">Hexo安装完成之后，输入下面指令初始化Hexo</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure></p><h1 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h1><p>在你刚才新建的空文件夹（blog）下右键选择<code>Git Bash</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean # 清除历史生成的静态文件</span><br><span class="line">hexo generate # 生成静态文件(简写：hexo g)</span><br><span class="line">hexo server # 启动本地服务(简写: hexo s)</span><br></pre></td></tr></table></figure></p><p> 一顿操作猛如虎以后，看到下面这条指令，代表服务开启成功，<em>浏览器中输入以下网站</em>就可以看到刚刚搭建的静态网页。<br> <code>INFO  Start processing</code><br><code>INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code></p><h1 id="Coding-pages-设置"><a href="#Coding-pages-设置" class="headerlink" title="Coding pages 设置"></a>Coding pages 设置</h1><p>现在我们已经在本地搭建好了我们的博客，麻溜儿部署起来让大家看到。</p><p>先打开<a href="https://coding.net/" target="_blank" rel="noopener">coding</a>,右上角注册一下。</p><h2 id="创建一个新仓库"><a href="#创建一个新仓库" class="headerlink" title="创建一个新仓库"></a>创建一个新仓库</h2><figure class="image-box">                <img src="0.png" alt="[ 创建新仓库 ]" title="" class="">                <p>[ 创建新仓库 ]</p>            </figure><p><img src="1.png" alt="[ 注意仓库名的格式是固定的，用户名+coding.me 不一致会出错 ]"></p><h2 id="开启静态pages"><a href="#开启静态pages" class="headerlink" title="开启静态pages"></a>开启静态pages</h2><p><img src="2.png" alt="[这是开启展示功能 ]"></p><h3 id="绑定个人域名，如果不需要可直接跳到添加部署密钥"><a href="#绑定个人域名，如果不需要可直接跳到添加部署密钥" class="headerlink" title="绑定个人域名，如果不需要可直接跳到添加部署密钥"></a>绑定个人域名，如果不需要可直接跳到添加部署密钥</h3><figure class="image-box">                <img src="3.png" alt="[点击设置]" title="" class="">                <p>[点击设置]</p>            </figure><figure class="image-box">                <img src="4.png" alt="[将你的个人域名输入 ]" title="" class="">                <p>[将你的个人域名输入 ]</p>            </figure><blockquote><p>注意个人域名的解析参考 <a href="https://coding.net/help/doc/pages/domain.html" target="_blank" rel="noopener">coding 官方帮助文档</a></p></blockquote><h2 id="添加部署密钥"><a href="#添加部署密钥" class="headerlink" title="添加部署密钥"></a>添加部署密钥</h2><p>打开<code>Git bash</code>，输入<code>ssh-keygen -t rsa -C &quot;897691781@qq.com</code>“,这个邮箱地址换成你的。连续四次回车就生成了一对密钥。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/韓仁輝/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/韓仁輝/.ssh/id_rsa.pub.</span><br></pre></td></tr></table></figure></p><p>它会告诉你密钥生成在那个文件夹,上面是我的密钥生成路径，下面要相应替换成你的，使用cat来查看公钥内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /c/Users/韓仁輝/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>复制输出的内容，打开<code>coding</code>你刚刚创建的项目，点击页面左侧设置里的部署公钥，点击新建公钥，把你刚刚复制的内容粘贴进去就可以了。</p><h1 id="git部署静态界面"><a href="#git部署静态界面" class="headerlink" title="git部署静态界面"></a>git部署静态界面</h1><p>通过git将你的静态页面push到你刚刚创建的coding pages上去</p><p>还是在<code>blog</code>根目录下，右键<code>Git Bash</code>，输入以下指令安装一个hexo的部署工具<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>安装完成以后，需要配置部署路径，打开blog文件夹下的<code>_config.yml</code>（打开方式别选记事本，编码不支持中文），下滑找到<code>deploy:</code>，将deploy修改为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repo:  git@git.coding.net:HanRenHui/HanRenHui.coding.me.git #注意将用户名换为你自己的</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>别忘记<code>ctril+s</code>保存一下，还是在<code>blog/</code>目录下，用hexo命令完成最终部署：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br><span class="line"># 2 3可以简写为 hexo g -d</span><br></pre></td></tr></table></figure></p><p>恭喜，打开浏览器在地址栏输入用户名.coding.me（有个人域名直接输入个人域名）就可以访问自己的博客啦!!!</p>]]></content>
      
      <categories>
          
          <category> 教程 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2018/08/04/hello-world/"/>
      <url>/blog/2018/08/04/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
