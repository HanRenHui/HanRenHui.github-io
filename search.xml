<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>React学习之react-redux基本实现</title>
      <link href="/blog/2019/03/01/React%E5%AD%A6%E4%B9%A0%E4%B9%8Breact-redux%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0/"/>
      <url>/blog/2019/03/01/React%E5%AD%A6%E4%B9%A0%E4%B9%8Breact-redux%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>跨域解决方案</title>
      <link href="/blog/2019/02/08/%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/blog/2019/02/08/%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前在项目中遇到了跨域的问题，昨天刚好有空就系统学习了一下，顺便在这边记录一下。</p><h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><p>所谓同源，指的是三个相同👇， 只要下方的三者有一者不一样，即为跨域</p><ul><li>协议相同</li><li>域名相同</li><li>端口相同</li></ul><p>拿<code>http://www.hanrenhuo.cn</code>来举几个栗子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.hanrenhui.cn/dir/a.html 同源</span></span><br><span class="line">http:<span class="comment">//www.hanrenhui.cn:50/dir2/a.html 端口不同，不同源</span></span><br><span class="line">https:<span class="comment">//www.hanrenhuo.cn/dir/a.html 协议不同 不同源</span></span><br><span class="line">http:<span class="comment">//hanrenhui.cn  域名不同，不同源</span></span><br></pre></td></tr></table></figure></p><h1 id="跨域限制"><a href="#跨域限制" class="headerlink" title="跨域限制"></a>跨域限制</h1><p>同源策略的目的是出于对<strong>用户信息安全</strong>的考虑，如果不同源则有以下几种限制👇</p><blockquote><p>Cookie、LocalStorage 和 IndexDB 无法读取。<br>DOM 无法获得。<br>AJAX 请求不能发送。</p></blockquote><p>但是在日常coding当中，免不了要跨域请求一些数据， 那么我们来看一下都有哪些跨域解决方案</p><h1 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h1><p>前面提到，不同源时<code>DOM无法获得</code>, 比如父窗口运行👇代码，想要获得iframe窗口的document对象，如果二者不同源则会报错<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myIFrame"</span>).contentWindow.document</span><br></pre></td></tr></table></figure></p><p>同样的子窗口想要获取父窗口的信息也会报错<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.parent.document.body</span><br></pre></td></tr></table></figure></p><p>如果这两个窗口一级域名相同，二级域名不同的话,类似 <code>http://www.hanrenhui.cn</code>和<code>http://a.hanrenhui.cn</code>，二者拥有公共的一级域名也就是<code>hanrenhui.cn</code>，那么在协议和端口都相同的情况下，两个窗口设置相同的<strong>document.domain</strong>就可获取对方的dom和数据</p><h1 id="片段标识符"><a href="#片段标识符" class="headerlink" title="片段标识符"></a>片段标识符</h1><p>先了解下片段标识符，片段标识符指的是url中<strong>#</strong>后边的内容, 它代表页面中的某个位置，那么我们如何利用它来完成跨域通信呢，<br>假设我们有三个页面，<code>a.html</code>, <code>b.html</code>, <code>c.html</code>, a, b同源， 与c不同源，a页面可以把信息放到子页面b的片段标识符中，子页面b就可以收到a的信息， 那么b如何向a发送消息呢, 有人可能会想到改变<code>window.parent.location.hash</code>的值，不好意思a, c两个页面是不同源的通过<code>window.parent</code>是拿不到父页面的，那咋办？a, c不同源， 但是a, b同源啊，a将消息传给c以后， c将要发给a的消息先通过hash值传给b， b再通过<code>window.parent.parent</code>的方式拿到a页面，改变其<code>hash</code>值, a页面再监听hash值得变化就可以了， show you code👇<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a页面</span></span><br><span class="line"><span class="comment">// html</span></span><br><span class="line">&lt;iframe src=<span class="string">"http://localhost:3000/public/c.html#hello"</span> id=<span class="string">"frame"</span> frameborder=<span class="string">"0"</span> onload=<span class="string">''</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="built_in">window</span>.onhashchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(location.hash)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// c页面只需要修改js</span></span><br><span class="line"><span class="keyword">let</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>)</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'gun'</span></span><br><span class="line">iframe.src = <span class="string">`http://localhost:1688/public/b.html#<span class="subst">$&#123;str&#125;</span>`</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(iframe)</span><br><span class="line"><span class="comment">//b页面</span></span><br><span class="line"><span class="built_in">window</span>.parent.parent.location.hash = location.hash</span><br></pre></td></tr></table></figure></p><p>不得不说这个方案真让人恶心🤢，我想和对象聊聊天还要一个第三者来传达消息？ Shit，I still single🐶! 恶心不要紧，下面这个方法相比之下可让人好受多了，，有个下边这种方案，跨窗口通信估计这种方法要成为历史了吧！！ I still single 😭</p><h1 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h1><p>HTML5为了解决跨窗口通信的问题，引入了一个全新的API：跨文档通信 API（Cross-document messaging) 这个API允许跨窗口通信，无论是否同源,下面我们来看下这个api怎么用<br>父窗口发送消息，子窗口接收消息<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">父窗口</span><br><span class="line">  <span class="keyword">let</span> child = <span class="built_in">window</span>.open(<span class="string">'http://127.0.0.1:5500/prop/child.html'</span>);</span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    child.postMessage(<span class="string">'hello my son'</span>, <span class="string">'http://127.0.0.1:5500/prop/child.html'</span>);</span><br><span class="line">  &#125;,<span class="number">1000</span>);</span><br><span class="line">子窗口</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.source); <span class="comment">// 发送消息的窗口</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.origin);  <span class="comment">// 消息发送的地址</span></span><br><span class="line">    <span class="built_in">console</span>.log(e.data); <span class="comment">// 发送过来的消息</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>或者是子窗口发送消息，父窗口接收消息<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">父窗口</span><br><span class="line">  <span class="keyword">let</span> child = <span class="built_in">window</span>.open(<span class="string">'http://127.0.0.1:5500/prop/child.html'</span>);</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, e=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.data);</span><br><span class="line">  &#125;);</span><br><span class="line">子窗口</span><br><span class="line">   setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.opener.postMessage(<span class="string">'hello, my father'</span>, <span class="string">'http://127.0.0.1:5500/Prop/parent.html'</span>);</span><br><span class="line">  &#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure></p><p>那么结合iframe怎么用呢?<br>index1.html是这样的👇<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">"http://localhost:3000/public/index2.html"</span> id=<span class="string">"frame"</span> frameborder=<span class="string">"0"</span> onload=<span class="string">'load()'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line">frame.contentWindow.postMessage(<span class="string">'How are you'</span>, <span class="string">'http://localhost:3000'</span>)</span><br><span class="line"><span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>index2.html是这样的👇<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.data);</span><br><span class="line">  e.source.postMessage(<span class="string">'so far so good'</span>, e.origin)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="window-name-iframe"><a href="#window-name-iframe" class="headerlink" title="window.name + iframe"></a>window.name + iframe</h1><blockquote><p>浏览器窗口有window.name属性。这个属性的最大特点是，无论是否同源，只要在同一个窗口里，前一个网页设置了这个属性，后一个网页可以读取它。</p></blockquote><p>假设我们有三个页面 <code>a.html</code>, <code>b.html</code>, <code>c.html</code> 其中 a，b两个页面同源并和c不同源， 那么我们可以在a的 iframe中引用c页面，c页面将数据存在<code>window.name</code>中， a页面iframe加载完成后将iframe的src指向同源的b页面, 在b页面中就可以拿到数据， 看着挺绕，看下代码👇<br>举个栗子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html </span></span><br><span class="line">  &lt;iframe src=<span class="string">"http://localhost:3000/public/C.html"</span> id=<span class="string">"frame"</span> frameborder=<span class="string">"0"</span> onload=<span class="string">'load()'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br><span class="line"><span class="comment">// js</span></span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">      <span class="keyword">let</span> frame = <span class="built_in">document</span>.querySelector(<span class="string">'iframe'</span>)</span><br><span class="line">      frame.src = <span class="string">'http://localhost:1688/public/b.html'</span></span><br><span class="line">      flag = <span class="literal">false</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> data =  frame.contentWindow.name</span><br><span class="line">      <span class="built_in">console</span>.log(data) <span class="comment">// 拿到数据</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h1 id="WebSocket-跨域"><a href="#WebSocket-跨域" class="headerlink" title="WebSocket 跨域"></a>WebSocket 跨域</h1><h2 id="什么是WebSocket"><a href="#什么是WebSocket" class="headerlink" title="什么是WebSocket"></a>什么是WebSocket</h2><p><code>WebSocket</code>是一种协议，类似于我们熟知的<code>HTTP协议</code>， 但是http协议呢只支持服务端和客户端推送消息，而WebSocket则支持全双工通信，客户端也可以主动向服务端发送消息，还有点不同，那就是WebSocket协议不受同源策略的限制， 此处只是简单列下用法， 关于详细知识，再推送<a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="noopener">阮一峰老师的这篇文章</a>， 下面我们来看下怎么使用</p><p>客户端(<a href="http://localhost:1688" target="_blank" rel="noopener">http://localhost:1688</a>)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:4000'</span>)</span><br><span class="line">socket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  socket.send(<span class="string">'How are you'</span>)</span><br><span class="line">&#125;</span><br><span class="line">socket.onmessage =<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>服务端(<a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a>)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> WebSocket  <span class="keyword">from</span> <span class="string">'ws'</span></span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">'express'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = express()</span><br><span class="line"><span class="keyword">let</span> wss = <span class="keyword">new</span> WebSocket.Server(&#123;<span class="attr">port</span> :<span class="number">4000</span>&#125;)</span><br><span class="line"></span><br><span class="line">wss.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ws</span>) </span>&#123;</span><br><span class="line">  ws.on(<span class="string">'message'</span>, data =&gt; &#123;</span><br><span class="line">    <span class="comment">// console.log(data)</span></span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">    ws.send(<span class="string">'So far so good'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></p><h1 id="JSONP跨域"><a href="#JSONP跨域" class="headerlink" title="JSONP跨域"></a>JSONP跨域</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>不知大家有没有发现，html静态标签的<code>src</code>或者<code>href</code>请求的内容是不受同源策略的限制的，这就是<code>JSONP</code>的精髓所在<br>举个栗子<br>我们新建一个html文件，然后添加以下代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://localhost:1688"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们把node服务器启动起来，监听1688端口,监听路由添加以下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, (req, res)=&gt;&#123;</span><br><span class="line">  res.end(<span class="string">'body&#123;background: red&#125;'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>然后我们打开html文件，展现在面前的是一个背景为红色的空页面<br>我们再拿script做个实验<br>新建html文件，然后添加已下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125; </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="http:/</span><span class="regexp">/localhost:1688"&gt;&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p><p>修改node路由<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/&apos;, (req, res)=&gt;&#123;</span><br><span class="line">  res.end(&apos;callback(&#123;name: &quot;韓仁輝&quot;, age: 21&#125;)&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>打开html文件<br><figure class="image-box">                <img src="2.png" alt="" title="" class="">                <p></p>            </figure><br>这就是JSONP的核心思想，将函数在前端提前定义好，然后利用script标签从后台返回调用语句</p><h2 id="手撸一个JSONP"><a href="#手撸一个JSONP" class="headerlink" title="手撸一个JSONP"></a>手撸一个JSONP</h2><p>明白原理以后我们来写一个，大体思想就是封装一个jsonp函数，这个函数动态的创建一个script标签并appendTo到body里去，标签的src由外界传入<br>前端代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">option</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 动态创建一个script标签</span></span><br><span class="line">   <span class="keyword">let</span> scrip = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">   <span class="comment">// callbackName 这种方式是防止浏览器cache</span></span><br><span class="line">   <span class="keyword">let</span> callbackName = <span class="string">`myfunc_<span class="subst">$&#123;<span class="built_in">Math</span>.random().toString().substr(<span class="number">2</span>)&#125;</span>`</span></span><br><span class="line">   <span class="comment">// 将script的src指向外界传进来的url</span></span><br><span class="line">   scrip.src = <span class="string">`<span class="subst">$&#123;option.url&#125;</span>?callback=<span class="subst">$&#123;callbackName&#125;</span>`</span>;</span><br><span class="line">   <span class="comment">// 将新建的script 添加到body中，添加完成就会自动向服务器发起请求，服务器返回函数执行语句，</span></span><br><span class="line">   <span class="built_in">document</span>.body.appendChild(scrip);</span><br><span class="line">   <span class="comment">// 这是是上边我们所说的提前定义的函数</span></span><br><span class="line">   <span class="built_in">window</span>[callbackName] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">     option.success(data);</span><br><span class="line">     <span class="comment">// 执行完以后就把多余的script标签去除</span></span><br><span class="line">     <span class="built_in">document</span>.body.removeChild(scrip);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> jsonp(&#123;</span><br><span class="line">   url: <span class="string">'http://localhost:1688'</span>,</span><br><span class="line">   success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(data);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p><p>后端代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'/'</span>, (req, res)=&gt;&#123;</span><br><span class="line">  <span class="comment">// 将要传给前端的数据包装成json字符串</span></span><br><span class="line">  <span class="keyword">let</span> data = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    name: <span class="string">'韓仁輝'</span>,</span><br><span class="line">    age: <span class="number">21</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 将函数执行语句返回给前端</span></span><br><span class="line">  res.end(<span class="string">`<span class="subst">$&#123;req.query.callback&#125;</span>(<span class="subst">$&#123;data&#125;</span>)`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="CORS-跨域"><a href="#CORS-跨域" class="headerlink" title="CORS 跨域"></a>CORS 跨域</h1><blockquote><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</p></blockquote><p>我们需要在服务器端做如下配置，就可以实现cors跨域<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">app.all(<span class="string">"*"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 上边说了，浏览器一旦检测到ajax请求跨域，就会附加一些头信息，其中最重要的就是ORigin这个字段，</span></span><br><span class="line">  <span class="comment">// 这句代码检测请求中是否带有该字段，如果没有则不是跨域请求，直接跳过，不归咱管</span></span><br><span class="line">  <span class="keyword">if</span> (!req.get(<span class="string">"Origin"</span>)) <span class="keyword">return</span> next();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//这个头部字段表示该服务器接收哪些域的跨域请求，可为星号(*)表示任意请求，或者具体某个域名，表示只接受该域名的请求</span></span><br><span class="line">  res.set(<span class="string">"Access-Control-Allow-Origin"</span>,<span class="string">"http://127.0.0.1:5500"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置允许的请求类型 默认只允许 get head post</span></span><br><span class="line">  res.set(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"PUT"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果前端想要设置请求头的话，这里就要设置一下前端要设置的请求头</span></span><br><span class="line">  res.set(<span class="string">"Access-Control-Allow-Headers"</span>: <span class="string">"name,age,..."</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果在本次请求的响应中 后端要setHeader设置响应头的话，前端要通过xhr.getResponseHeader("name")拿的话也会报错需要这样设置一下</span></span><br><span class="line">  res.set(<span class="string">"Access-Control-Expose-Headers"</span>: <span class="string">"name, age , ...."</span>)</span><br><span class="line">  <span class="comment">// 如果想要允许前端发送cookie，则要设置此字段，同时前台发起ajax请求的时候做如下设置</span></span><br><span class="line">  <span class="comment">// var xhr = new XMLHttpRequest();</span></span><br><span class="line">  <span class="comment">// document.cookie = 'hertz'</span></span><br><span class="line">  <span class="comment">// xhr.withCredentials = true;</span></span><br><span class="line">  <span class="comment">// 注意：如果要想前端携带cookie那么access-control-allow-origin就只能设置特定的域</span></span><br><span class="line">  res.set(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 复杂请求的预检请求，隔6秒发一次， 再这6秒内，如果发过预请求就不会再发</span></span><br><span class="line">  <span class="comment">//  关于简单请求和复杂请求，可参考[阮一峰大佬的这篇日志](http://www.ruanyifeng.com/blog/2016/04/cors.html)</span></span><br><span class="line">  res.set(<span class="string">"Access-Control-Max-Age"</span>: <span class="number">6</span>);</span><br><span class="line">  <span class="comment">// 复杂请求的预请求，直接结束本次请求就好，预请求的method为options</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"OPTIONS"</span> === req.method) <span class="keyword">return</span> res.sendStatus(<span class="number">200</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="webpack-代理跨域"><a href="#webpack-代理跨域" class="headerlink" title="webpack 代理跨域"></a>webpack 代理跨域</h1><p>通过设置webpack devServer的poxy属性，让其代理跨域<br>具体设置如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: ...,</span><br><span class="line">  output: ...,</span><br><span class="line">  <span class="built_in">module</span>: ...,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;  <span class="comment">//使用"/api"来代替线上服务器地址</span></span><br><span class="line">        target: <span class="string">'http://mobile.yangkeduo.com'</span>, <span class="comment">//源地址</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>, <span class="comment">//改变源</span></span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">''</span> <span class="comment">//路径重写</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>同源策略针对的是前端，对服务器并无要求，那么我们可以让前端对同源的服务器发送一个请求，然后同源服务器作为代理去向目标服务器请求数据，然后把数据给我们, 这就是<code>devServer</code>的原理，内部用的是<code>http-proxy-middleware</code>中间件</p><h1 id="Nginx反向代理"><a href="#Nginx反向代理" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h1><p>这也是目前实现跨域非常常见的手段，但是由于本人还未学习到这部分内容，所以在这里也放个标题，后期再补充….</p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 跨域 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React学习之实现一个Redux</title>
      <link href="/blog/2019/02/08/React%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AARedux/"/>
      <url>/blog/2019/02/08/React%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AARedux/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>昨天只有两节课，这么充足的课余时间当然是拿来学习啦📕， 花了一下午的时间学习了Redux的使用，Redux的实现原理也很简单，特意今天逃了一小节课来写篇笔记(没办法，今天满课😭)</p><h1 id="为什么需要Redux"><a href="#为什么需要Redux" class="headerlink" title="为什么需要Redux"></a>为什么需要Redux</h1><p>我们都知道在<code>React</code>或者<code>Vue</code>中同级组件之间是无法进行数据共享或者传递的，那么如果我们在这两个同级组件想使用同一个<code>State</code>的话该怎么办呢？ 对的，我们可以把<code>State</code>定义在父级组件中，然后通过<code>Prop</code>从父级组件传递给子级， 但是想象一下，只有父级和子级的话倒还好，要是有一族谱呢? I mean, 这里的组件有十八层，从顶层一层层传到底层的话， 不累死也麻烦死了，所以<code>React</code>和<code>Vue</code>都给出了自己的解决方案， 分别是<code>Redux</code>和<code>Vuex</code>来统一管理状态，这样的话哪个组件想用就直接拿就好了, 但是<code>Vuex</code>的实现不是本篇的重点，关于<code>Vuex</code>的实现咱们后面文章中见</p><h1 id="Redux-工作流"><a href="#Redux-工作流" class="headerlink" title="Redux 工作流"></a>Redux 工作流</h1><p>我们先来看张<del>恶心的</del>图, </p><p><img src="1.png" alt="redux流程图"></p><p>我们看着这张图细聊一下redux的流程及基本使用👇</p><p>很显然在这张图里核心就是<strong>Store</strong>了,其他三个元素都与它有关系，我们先来看下<code>Component</code>(React里的组件)与它的关系，<code>Component</code>可以通过<strong>getStore()</strong>从Store中取得状态，状态在<strong>Store</strong>中统一管理，这样就避免了状态需要一层层往下传的噩梦🤢, 那么组件怎么修改状态呢？ 显然组件如果对状态只是get不能set的话就有点说不过去了，<strong>在redux中，状态的修改需要组件通知Store, Store再通知reducer，然后把你想要做的事情传给reducer，然后由reducer代理修改state</strong>，然后将新状态(<code>newState</code>)返回给<code>Store</code>, <code>Store</code>中的state更新以后，所有订阅了该state的组件就会更新视图,组件如何通知Store？通过<code>dispatch</code>方法,那么组件如何将<code>想做的事情</code>传给reducer呢？ 通过<code>actionCreators</code>, 该对象里定义了各种action，action是一个由type属性和其它属性组成的对象，类似这样 <code>{ type: &#39;add_one&#39;, index: 1}</code>, type是一定要带的， <strong>type决定了reducer在收到代理请求后对state做何种处理</strong>，是宰是杀， 是炒是炖， 完全由你说了算， 而除了type的其他属性则是 你在处决state时可能需要某些参数， 比如：state里存着某个数组，你想去掉某一项，调用数组的splice方法得把index给它吧？ 这种处置state所需的参数就是放在action中，所以组件想要修改state就是调用dispatch方法，然后将action传进去</p><p><strong>总结一下</strong>👇<br>无论是组件想要获取状态还是修改状态始终都离不开store核心的参与， 获取状态只需要调用store.getState() 就可以了，而修改状态则需要通过store.dispatch(store)来告诉store你想要修改状态, store则通过调用reducer来修改状态，reducer修改完以后会返回新状态给store，store拿到新状态以后所有订阅store里该state的组件就会重新刷新视图</p><h1 id="Redux的使用"><a href="#Redux的使用" class="headerlink" title="Redux的使用"></a>Redux的使用</h1><p>我们结合redux的使用来手撸一个Redux</p><p>我们先会回忆下redux的使用, 比如说我们实现一个计数器，有加按钮和减按钮，我们来看下Code</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// reducer</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = &#123; number: <span class="number">0</span> &#125;, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!action) <span class="keyword">return</span> state </span><br><span class="line">    <span class="keyword">let</span> newState</span><br><span class="line">    <span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'INCREASE'</span>:</span><br><span class="line">        <span class="comment">// 深拷贝老的state</span></span><br><span class="line">        newState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state))</span><br><span class="line">        newState.number += action.count</span><br><span class="line">        <span class="keyword">return</span> newState</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'DECREASE'</span>: </span><br><span class="line">        newState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state))</span><br><span class="line">        newState.number -= action.count </span><br><span class="line">        <span class="keyword">return</span> newState</span><br><span class="line">      <span class="keyword">default</span> :</span><br><span class="line">        <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// store</span></span><br><span class="line">  <span class="keyword">import</span> &#123; CreateStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line">  <span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span></span><br><span class="line">  <span class="keyword">const</span> store = CreateStore(reducer)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 唯一的App组件</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.state = store.getState()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    <span class="comment">// 订阅 状态一旦改变则重新刷新视图</span></span><br><span class="line">    <span class="keyword">this</span>.unsubscribe = store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; </span><br><span class="line">        number: store.getState().number</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; </span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="comment">// 组件卸载，取消订阅， 结合路由的时候会非常有用</span></span><br><span class="line">    <span class="keyword">this</span>.unsubscribe()</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;p&gt;&#123;<span class="keyword">this</span>.state.number&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;() =&gt; store.dispatch(&#123;type: 'INCREASE', count: 1&#125;)&#125;&gt;+&lt;/</span>button&gt;</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; store.dispatch(&#123;<span class="attr">type</span>: <span class="string">'DECREASE'</span>, <span class="attr">count</span>: <span class="number">1</span>&#125;)&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>我们来总结下Redux怎么用的👇<br>redux模块内部返回了一个对象， CreateStore是其中一个属性，对应的值是一个方法，将reducer传进该方法返回store, 后续所有操作都是store. 的方式，所以store也是一个对象，我们在这个例子中使用了getState(), subscribe(), dispatch()这三个方法, 所以store对象里的属性也就确定了。<br>再来看，我们通过dispacth来修改state, 而redux的工作流是store通知reducer来更改数据，并将新数据返回给store， 所以dispatch内部应该是调用reducer，并且把action传了进去，reducer返回新数据并修改store的旧数据。现在获取数据和修改数据都有了，还差页面刷新，页面刷新是利用了发布订阅模式， 将要想修改的state通过subscribe来订阅消息，state一旦更新，redux内部则发布消息，组件收到消息便调用setState刷新页面</p><h1 id="实现redux"><a href="#实现redux" class="headerlink" title="实现redux"></a>实现redux</h1><p>现在知道怎么用了，我们来自己手撸一个redux👇<br>上面说到, redux内部返回了一个带有createStore方法的属性,而且调用createState返回了一个带有三个方法的对象，所有redux的大体框架是这样子的👇</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createState</span>(<span class="params">reducer</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    dispatch,</span><br><span class="line">    subscribe,</span><br><span class="line">    getState</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; createState &#125;</span><br></pre></td></tr></table></figure><ul><li>我们来一点点把这个骨架撑起来， 首先是getState, 通过它可以获取到store内部的state， 所有createStore内部维护了一个state属性，并且getState把它暴露给外界</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接下来是subscribe，这个方法用来将要订阅的对象存入到一个订阅数组(watchers)中, 同时它返回一个函数unsubscribe，取消订阅，也就是将该订阅对象从订阅数组中去除</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> subscribe = <span class="function"><span class="params">watcher</span> =&gt;</span> &#123;</span><br><span class="line">  watchers.push(watcher)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> newWatchers = watchers.filter( <span class="function"><span class="params">w</span> =&gt;</span> w!== watcher)</span><br><span class="line">    <span class="keyword">return</span> newWatchers</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有订阅，自然有发布</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  watchers.forEach( <span class="function"><span class="params">w</span> =&gt;</span> w())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最后是dispatch,dispatch接受一个action，而且内部会调用reducer并将action传给它，最后reducer返回一个新的state，数据更改完肯定要通知所有订阅组件刷新视图, </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dispatch = <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">  state = reducer(state, action)</span><br><span class="line">  emit()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下完整代码👇</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> state</span><br><span class="line">  <span class="keyword">let</span> watchers = []</span><br><span class="line">  <span class="keyword">const</span> subscribe = <span class="function"><span class="params">watcher</span> =&gt;</span> &#123;</span><br><span class="line">    watchers.push(watcher)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> newWatchers = watchers.filter( <span class="function"><span class="params">w</span> =&gt;</span> w!== watcher)</span><br><span class="line">      <span class="keyword">return</span> newWatchers</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> emit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    watchers.forEach( <span class="function"><span class="params">w</span> =&gt;</span> w())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">    state = reducer(state, action)</span><br><span class="line">    emit()</span><br><span class="line">  &#125;</span><br><span class="line">  dispatch()</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    dispatch,</span><br><span class="line">    subscribe,</span><br><span class="line">    getState</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; createStore &#125;</span><br></pre></td></tr></table></figure><p>是不是特别简单👍？， 三十行搞定(当然我们只是实现了基本的功能而已😀)</p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> React </category>
          
          <category> Redux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> React </tag>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>从EventLoop谈js运行机制</title>
      <link href="/blog/2018/12/01/js%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
      <url>/blog/2018/12/01/js%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>之前同学问了我一句 <code>js运行机制是什么？</code> ，当时是我第一次见到这个概念，脑子里一团浆糊，我该回答什么。 同步异步？ Event Loop? 脑子里全是一些碎片化的概念， 如果这是道面试题那我就凉了,回宿舍以后就查看了一些文章，总算是对js的运行机制有了一定的了解,刚好今天周末把碎片化的知识梳理一下，整理成一篇笔记（从浏览器的多进程一直到js的线程）;</p><hr><h1 id="多进程的浏览器"><a href="#多进程的浏览器" class="headerlink" title="多进程的浏览器"></a>多进程的浏览器</h1><p>浏览器包含以下几种进程👇:</p><ul><li><strong>Browser进程</strong>：浏览器的主进程 (负责协调与主控)</li><li><strong>第三方插件进程</strong> : 每种类型的插件对应一个进程，只有当使用该插件的时候才会创建</li><li><strong>GPU进程</strong>: 最多一个，用于3D绘制等….</li><li><strong>浏览器渲染进程(Renderer进程)</strong>：也就是常说的浏览器内核：默认每个Tab页面一个进程，多个页面之间互不影响，用于页面渲染，脚本执行，事件处理等</li></ul><figure class="image-box">                <img src="1.png" alt="" title="" class="">                <p></p>            </figure><h1 id="多线程的浏览器渲染进程-浏览器内核"><a href="#多线程的浏览器渲染进程-浏览器内核" class="headerlink" title="多线程的浏览器渲染进程(浏览器内核)"></a>多线程的浏览器渲染进程(浏览器内核)</h1><p><code>Renderer进程</code>包含以下几个常驻线程</p><ul><li><em>GUI渲染线程</em>：负责渲染浏览器的页面，解析HTML成<code>DOM树</code>,解析CSS成<code>CSSOM树</code>,DOM和CSSOM组合成<code>RenderTree</code>; 负责重绘(repaint)和回流(reflow)等…..</li><li><em>js引擎线程</em>: 本文重点，也称为<strong>js内核</strong>，负责处理js的脚本程序(注意：该线程与GUI线程是互斥的，其中一个线程运行，另一个就会挂起)</li><li><em>事件触发线程</em>: 负责控制事件的循环<ul><li>当js引擎处理js脚本遇到<code>setTimeOut</code>等异步事件时，会将对应的任务添加到事件线程中</li><li>当对应的事件有了结果以后，事件触发线程会将该任务添加到异步事件队列的队尾，等待js引擎空闲的时候来处理</li></ul></li><li><em>定时触发器线程</em>： 负责定时计数器（因为js是单线程，处于阻塞状态的话会影响计时，所以浏览器才多开一条线程来辅助js线程）</li><li><em>异步http请求线程</em>: 在<code>XMLHttpRequest</code>在连接后是通过浏览器新开一个线程请求;检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中,再由JavaScript引擎执行。</li></ul><p><img src="2.png" alt=""></p><h1 id="从Event-Loop谈JS的运行机制"><a href="#从Event-Loop谈JS的运行机制" class="headerlink" title="从Event Loop谈JS的运行机制"></a>从Event Loop谈JS的运行机制</h1><p>谈之前，先理解一些概念性的东西</p><ul><li>js分为同步任务和异步任务</li><li>同步任务在<code>主线程</code>上运行，会形成一个<code>执行栈</code></li><li>事件触发线程管理着一个任务队列，按顺序保存有了结果的异步事件</li><li>任务队列中的异步事件在js引擎空闲时（也就是同步任务全部执行完的时候），被js引擎执行</li><li>js中的任务又分为<strong>macrotask</strong>（宏任务）和<strong>microtask</strong>（微任务）</li></ul><p>我们正式进入js引擎的运行机制的分析<br>先盗张图👇<br><figure class="image-box">                <img src="5.png" alt="" title="" class="">                <p></p>            </figure><br>我们根据上图来看,主线程运行的时候会形成一个执行栈，栈中的代码在调用一些异步的API时（相当于异步事件有了结果），便会在任务队列中添加对应的异步事件，在js引擎空闲的时候（也就是执行栈中的任务全部执行完），便会遍历任务队列，按照先后顺序将任务队列中的事件压到执行栈中被js引擎执行,如此反复形成一个事件循环（Event Loop）;<br>但是这些还不够，因为在ES6的Promise中又有了一个新的概念，微任务（microtask）;</p><h2 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h2><ul><li>宏任务：这就像是你在医院挂了号排队一样，正在等待的病人就是一个个的宏任务，，长长的队伍就可以看作是任务队列，任务队列中保存了有结果的异步事件（不是说注册了就往队列中添加，而是有结果以后,比如click事件触发以后，setTimeOut延迟时间到了以后…..），看病的医生就是js引擎；医生一次只能看一个病人，也就是说js引擎一次只能执行一个宏任务，执行完处于空闲状态时才会去执行下一个宏任务;</li><li>微任务： 宏任务执行过程中可以捎带一些微任务，结合到刚才的例子里就是，已经轮到你看病了，但是可能由于你前面的病人记性不太好把医生的嘱托忘记了，又回过头来问医生，那这个时候医生总不能让病人重新排队吧，那这时候你就只能等着,在当前的微任务没有执行完的时候是不会执行下一个宏任务的；</li></ul><p>宏任务</p><figure class="image-box">                <img src="3.png" alt="" title="" class="">                <p></p>            </figure><p>微任务<br><figure class="image-box">                <img src="4.png" alt="" title="" class="">                <p></p>            </figure></p><p>理解了宏任务和微任务以后，我们再来完善下上边所说的Event Loop；</p><ul><li>主线程执行同步代码 形成一个执行栈，同时异步任务进入Event Table并注册函数</li><li>异步任务有了结果，被事件触发线程添加到任务队列中，宏任务进入宏任务队列，微任务进入微任务队列；</li><li>待执行栈中的任务执行完以后，引擎先来查看任务队列中是否有可执行的微任务，有的话执行所有的微任务，清空微任务队列</li><li>微任务执行完，读取宏任务队列，一次读取一个（不同于微任务），读取一个就压入执行栈中执行, 每执行完一个宏任务就清空微任务队列,</li><li>如此循环，形成一个Event Loop;</li></ul>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> javascript </category>
          
          <category> 运行机制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> javascript </tag>
            
            <tag> 运行机制 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>从变量提升的角度比较var和let</title>
      <link href="/blog/2018/10/19/%E4%BB%8E%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E7%9A%84%E8%A7%92%E5%BA%A6%E6%AF%94%E8%BE%83var%E5%92%8Clet/"/>
      <url>/blog/2018/10/19/%E4%BB%8E%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E7%9A%84%E8%A7%92%E5%BA%A6%E6%AF%94%E8%BE%83var%E5%92%8Clet/</url>
      <content type="html"><![CDATA[<h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><p>其实这篇笔记是在看由一个名为<code>var的变量提升的底层原理</code>的面试题而引起的，当时只是知道var声明变量会存在变量提升的情况，然而底层实现原理却毫无涉及，在网上看了多篇相关文章，总结出这么一篇小笔记，纯属个人浅陋见解，说的不对的地方，勿喷，勿喷。。。</p><hr><h1 id="什么是变量提升？"><a href="#什么是变量提升？" class="headerlink" title="什么是变量提升？"></a>什么是变量提升？</h1><p>既然要比较<code>var</code>和<code>let</code>，那不妨把变量提升的概念先写一下吧！👇</p><blockquote><p>JavaScript 中，函数及变量的声明都将被提升到函数的最顶部。<code>JavaScript</code>中，变量可以在使用后声明，也就是变量可以先使用再声明。</p></blockquote><p>举个栗子？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(swag); <span class="comment">// undefined</span></span><br><span class="line">    <span class="keyword">var</span> swag = <span class="string">"hello,world"</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>有其他编程语言基础的童鞋会觉得，在我定义<code>swag</code>变量之前调用它，肯定要报错的啊，然而js的变量比较神奇，它给你在底层这么干了👇</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> swag；</span><br><span class="line">    <span class="built_in">console</span>.log(swag);</span><br><span class="line">    swag = <span class="string">"hello,world"</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>现在是不是觉得输出<code>undefined</code>就有道理的多了？<br>在这个例子中，变量的声明被提升到作用域的顶部，这就是<code>变量提升</code>(函数定义具有同样的效果，但是函数提升会提到变量声明上面)，搞清楚了var，你可能会像，ES6里的let，难道也一样么？，那我们把var换成let试试👇<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(swag); <span class="comment">// Uncaught ReferenceError: swag is not defined</span></span><br><span class="line">    <span class="keyword">let</span> swag = <span class="string">"hello,world"</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>然而报错了，这是为什么？不急，我们一点点来说var和let在<strong>变量提升角度的区别</strong>!</p><h1 id="变量生命周期"><a href="#变量生命周期" class="headerlink" title="变量生命周期"></a>变量生命周期</h1><p>当引擎访问变量的时候，变量会经过以下三种生命周期:</p><ul><li>声明阶段 （这个阶段访问变量的话会报错）</li><li>初始化阶段 (在这个阶段变量就可以访问了，但是值是undefined)</li><li>赋值阶段</li></ul><h1 id="javascript引擎的工作方式"><a href="#javascript引擎的工作方式" class="headerlink" title="javascript引擎的工作方式"></a>javascript引擎的工作方式</h1><ul><li>先解析代码，获取所有被声明的变量</li><li>然后一行行运行代码</li></ul><p>也就是说，js引擎会分为预处理和执行两个阶段，当js引擎遇到一个作用域时，如果有var声明的变量（并不是代码执行到这一行，而是引擎瞅了一眼该域中全部代码,发现这个作用域里有var声明的变量），便会首先对这个变量 声明和初始化(<strong>引擎预处理阶段</strong>)，也就是变量生命周期的前两个阶段，就相当于在作用于头部<code>var</code>了一个变量，但是并没有赋值（此时的值为<code>undefined</code>）;进行完这两个阶段以后js引擎才正式从作用域头部开始一行行执行代码(<strong>引擎执行阶段</strong>)，在碰到变量的赋值语句之前，所有访问该变量的代码都返回<code>undefined</code>，执行完赋值语句后该变量才正式拥有值，代码也才可以正常访问该值;</p><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>那么var和let的区别是什么呢，变量无论是通过let声明，还是var声明，变量的生命周期是不会变的，不同点在于var量时，声明阶段和初始化阶段是一起 的，而let变量是分开的，上边说到，js遇到一个作用域，打眼一看对var声明的所有变量进行声明和初始化,此时变量可以访问，但是值要等到执行完赋值语句才会有；而let呢，let定义的变量，js引擎在预处理阶段，只会对这些变量进行声明这一步操作，等到let a 执行的时候才会完成初始化阶段，而在let a 执行之前是不能访问到let 定义的所有变量的，这难道就是es6里的暂时性死区？let a 执行之后才会把变量从暂时性死区中放出来，最后赋值语句执行完以后就可以拿到a的准确值了</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>其实var和let都会存在提升的这样一种情况，只不过var 的话会完成变量声明周期的前两个阶段，相当于var a；所以之后就可以访问到了，而let的话只是完成生命周期的第一个阶段，此时的变量被放入了暂时性死区，在作用域中未初始化阶段访问会报错：<br>以上</p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> javascript </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> javascript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浮动-塌陷问题</title>
      <link href="/blog/2018/09/24/%E6%B5%AE%E5%8A%A8-%E5%A1%8C%E9%99%B7%E9%97%AE%E9%A2%98/"/>
      <url>/blog/2018/09/24/%E6%B5%AE%E5%8A%A8-%E5%A1%8C%E9%99%B7%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="一点废话"><a href="#一点废话" class="headerlink" title="一点废话"></a>一点废话</h1><p>昨晚学习了解决浮动带来的父元素高度塌陷的问题，解决方法还挺多，就在这记录一下加深下印象，也方便后边的查阅；老规矩，废话不多说，直奔主题;</p><h1 id="什么是高度塌陷"><a href="#什么是高度塌陷" class="headerlink" title="什么是高度塌陷"></a>什么是高度塌陷</h1><p>大家都知道块级元素的高度会由子元素撑起来，但是子元素一旦浮动以后，块级元素的高度就没有了，就像下图这样：</p><figure class="image-box">                <img src="未浮动.png" alt="[未浮动]" title="" class="">                <p>[未浮动]</p>            </figure><figure class="image-box">                <img src="浮动.png" alt="[浮动以后]" title="" class="">                <p>[浮动以后]</p>            </figure><p>其实最简单的解决方式就是给<strong>块级元素一个高度</strong>，让它不依赖子元素的高度，但是在实际应用当中，我们很少会给父元素高度，因为子元素的内容是从后台取出来的，有多少内容你也不知道，自然不能给明确的高度；那怎么搞? 不急往下看；</p><h1 id="方式一-开启父元素BFC"><a href="#方式一-开启父元素BFC" class="headerlink" title="方式一:开启父元素BFC"></a>方式一:开启父元素BFC</h1><p>至于BFC的一些具体概念，在这不做阐述，有兴趣可以自行查阅，我把 <a href="https://juejin.im/post/59b73d5bf265da064618731d" target="_blank" rel="noopener">链接放这</a>;</p><h2 id="开启方式"><a href="#开启方式" class="headerlink" title="开启方式"></a>开启方式</h2><ul><li>设置父元素为浮动元素</li><li>设置父元素为绝对定位</li><li>设置父元素为行内块级元素(display: inline-block)</li><li>设置父元素overflow: hidden</li></ul><p>如果只是单纯的想要开启BFC，前三种方式有点暴力，所以大多数情况下，我们选择<strong>第四种</strong></p><h2 id="开启后的特性"><a href="#开启后的特性" class="headerlink" title="开启后的特性"></a>开启后的特性</h2><ul><li>父元素的垂直外边距不会与子元素的重叠</li><li>不会被浮动元素盖住</li><li>可以包含浮动元素</li></ul><p>我们就是利用<strong>第三点</strong>来解决高度塌陷问题</p><h1 id="方式二-在塌陷的父元素的最后添加一个空白的div，然后对该div进行清除浮动"><a href="#方式二-在塌陷的父元素的最后添加一个空白的div，然后对该div进行清除浮动" class="headerlink" title="方式二: 在塌陷的父元素的最后添加一个空白的div，然后对该div进行清除浮动"></a>方式二: 在塌陷的父元素的最后添加一个空白的div，然后对该div进行清除浮动</h1><p>像这样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"box1"</span>&gt;</span><br><span class="line">&lt;div id=<span class="string">"box2"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div id =<span class="string">'box3'</span> style=<span class="string">"clear:both"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></p><p>为什么这样就可以解决问题了呢，这里涉及一个清除浮动的问题，<code>clear:both</code>,清除浮动对该元素的影响，换句话说：前一个元素浮动以后，因为浮动元素脱离了标准流，后边元素的位置是会发生变化的，如果不想发生变化，就需要给后边的元素加上一句：<code>clear:both</code>;<br>应用到我们这几行代码中就是，box3的位置不会因为box2的浮动而变化，box3一直在原地撑着，那么box1的高度也不会发生变化。over！</p><h1 id="方式三：使用after伪类，向父元素后添加一个块元素，并对其清除浮动"><a href="#方式三：使用after伪类，向父元素后添加一个块元素，并对其清除浮动" class="headerlink" title="方式三：使用after伪类，向父元素后添加一个块元素，并对其清除浮动"></a>方式三：使用after伪类，向父元素后添加一个块元素，并对其清除浮动</h1><p>大家可能发现了，方式二的解决方法并不是很好，因为它平白无故在box1里添加了一个多余标签，方式三就是为了解决掉方式二存在的问题，同时又能解决塌陷<br>css代码如下<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line"><span class="attribute">display</span>:block;</span><br><span class="line"><span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>html代码如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span> <span class="attr">class</span> = <span class="string">'clearfix'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>方式二和方式三的解决办法是一样的，都是在子元素后边添加一些内容，并对这些内容清除浮动，但是方式三相比方式二不需要添加多余的结构</strong></p><p>以上</p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSS </category>
          
          <category> 浮动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> CSS </tag>
            
            <tag> 浮动 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS常见布局方式(二)</title>
      <link href="/blog/2018/09/03/CSS%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F-%E4%BA%8C/"/>
      <url>/blog/2018/09/03/CSS%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章记录下<code>圣杯布局</code>和<code>双飞翼布局</code>，两种布局达到效果上基本相同，都是两边两栏宽度固定，中间栏宽度自适应。在HTML结构上中间栏在最前面保证了最先渲染中间提升性能；</p><h1 id="圣杯布局的实现"><a href="#圣杯布局的实现" class="headerlink" title="圣杯布局的实现"></a>圣杯布局的实现</h1><p>圣杯布局的关键在于让中间栏的宽度可以自适应，想要适应浏览器宽度的变化，用百分比来设置中间栏的宽度最合适不过了，所以我们可以将中间部分的宽度设置为<strong>100%</strong>，同时需要左右两栏紧靠浏览器两端，废话不多说，上代码<br>既然是三栏布局，那么我们需要三个盒子，外加给它套个容器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span>我是测试我是测试我是测试我是测试我是测试试我是测试我是测试我是测试试我是测试我是测试我是测试试我是测试我是测试我是测试试我是测试我是测试我是测试试我是测试我是测试我是测试试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>我是left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>我是right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>给它添加如下的CSS样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: seagreen;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.middle</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: steelblue;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前是这个逼样👇</p><figure class="image-box">                <img src="1.png" alt="" title="" class="">                <p></p>            </figure><p>接下来我们把这仨哥们放到同一行，这需要利用<strong>负margin</strong>的技巧：我们给left和right的CSS样式做如下修改：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在布局变成这样👇<br><figure class="image-box">                <img src="2.png" alt="" title="" class="">                <p></p>            </figure></p><p>此时中间部分的内容是盖住的，为了内容不被盖住，我们可以通过给父盒子设置<code>padding</code>的方式来让中间的内容只显示在中间；同时为了两边的盒子位置不变，我们需要添加如下的CSS样式代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">left</span>:-<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">right</span>:-<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在是最终布局：👇<br><figure class="image-box">                <img src="3.png" alt="" title="" class="">                <p></p>            </figure><br>试着压缩浏览器宽度后：👇<br><figure class="image-box">                <img src="4.png" alt="" title="" class="">                <p></p>            </figure></p><h1 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h1><p>其实双飞翼布局是为了解决圣杯布局的弊端提出的，上面的圣杯布局的代码存在一个问题，当你将浏览器宽度缩短到一定程度，使得中间子元素的宽度比左右子元素宽度小的时候，这时候布局就会出现问题。所以首先，这提示了我们在使用圣杯布局的时候一定要设置整个容器的最小宽度。</p><figure class="image-box">                <img src="5.png" alt="" title="" class="">                <p></p>            </figure><h1 id="双飞翼布局和圣杯布局的区别"><a href="#双飞翼布局和圣杯布局的区别" class="headerlink" title="双飞翼布局和圣杯布局的区别"></a>双飞翼布局和圣杯布局的区别</h1><blockquote><p>圣杯布局和双飞翼布局解决问题的方案在前一半是相同的，也就是三栏全部float浮动，但左右两栏加上负margin让其跟中间栏div并排，以形成三栏布局。<br>不同在于解决”中间栏div内容不被遮挡“问题的思路不一样：圣杯布局，为了中间div内容不被遮挡，将中间div设置了左右padding-left和padding-right后，将左右 &gt; 两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。<br>双飞翼布局，为了中间div内容不被遮挡，直接在中间div内部创建子div用于放置内容，在该子div里用margin-left和margin-right为左右两栏div留出位置。</p></blockquote><figure class="image-box">                <img src="6.png" alt="" title="" class="">                <p></p>            </figure>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> CSS </tag>
            
            <tag> 圣杯布局 </tag>
            
            <tag> 双飞翼布局 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS常见布局方式(一)</title>
      <link href="/blog/2018/09/02/CSS%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/"/>
      <url>/blog/2018/09/02/CSS%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h1><p>布局的传统解决方案，基于盒状模型，依赖 <code>display</code>属性 + <code>position</code>属性 + <code>float</code>属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。于是W3C提出了一种新的方案—-Flex布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。<br><a id="more"></a></p><figure class="image-box">                <img src="1.png" alt="" title="" class="">                <p></p>            </figure><h2 id="什么是flex布局"><a href="#什么是flex布局" class="headerlink" title="什么是flex布局"></a>什么是flex布局</h2><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。flex 是一种新型的布局方式，使用该布局方式可以实现几乎所有你想要的效果。</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>flex的使用方法很简单，只需要将其 display 属性设置为 flex 就可以，也可以设置行内的 flex。<strong>注意，设为 Flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</strong></p><h2 id="碎碎的概念"><a href="#碎碎的概念" class="headerlink" title="碎碎的概念"></a>碎碎的概念</h2><p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。</p><figure class="image-box">                <img src="2.png" alt="[]" title="" class="">                <p>[]</p>            </figure><blockquote><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交&gt;叉轴的开始位置叫做cross start，结束位置叫做cross end。<br>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p></blockquote><h2 id="父容器属性"><a href="#父容器属性" class="headerlink" title="父容器属性"></a>父容器属性</h2><p>父容器上有六个属性：</p><ul><li>flex-direction：主轴的方向（默认水平）。</li><li>flex-wrap：超出父容器子容器的排列样式。</li><li>flex-flow：flex-direction 属性和 flex-wrap 属性的简写形式。</li><li>justify-content：子容器在主轴的排列方向。</li><li>align-items：子容器在交叉轴的排列方向。</li><li>align-content：多根轴线的对齐方式。</li></ul><h3 id="flex-direction-属性"><a href="#flex-direction-属性" class="headerlink" title="flex-direction 属性"></a>flex-direction 属性</h3><p>这个属性是用来设置主轴的方向的，默认是水平方向，也可以用来设置其他方向，show you the code：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    flex-direction: row;                <span class="comment">// 默认值，主轴为水平方向，起点在左端。</span></span><br><span class="line">    flex-direction: row-reverse;        <span class="comment">// 主轴为水平方向，起点在右端。</span></span><br><span class="line">    flex-direction: column;             <span class="comment">// 主轴为垂直方向，起点在上。</span></span><br><span class="line">    flex-direction: column-reverse;     <span class="comment">// 主轴为垂直方向，起点在下。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="3.png" alt="[]" title="" class="">                <p>[]</p>            </figure><h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p><code>flex-wrap</code> 属性决定子容器如果在一条轴线排不下时，如何换行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    flex-wrap: nowrap;          <span class="comment">// 默认，不换行</span></span><br><span class="line">    flex-wrap: wrap;            <span class="comment">// 换行，第一行在上方。</span></span><br><span class="line">    flex-wrap: wrap-reverse     <span class="comment">// 换行，第一行在下方。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="4.png" alt="[flex-wrap:nowrap(子盒子宽度被挤压)]" title="" class="">                <p>[flex-wrap:nowrap(子盒子宽度被挤压)]</p>            </figure><figure class="image-box">                <img src="5.png" alt="[flex-warp:warp]" title="" class="">                <p>[flex-warp:warp]</p>            </figure><figure class="image-box">                <img src="6.png" alt="[flex-warp:warp-reverse]" title="" class="">                <p>[flex-warp:warp-reverse]</p>            </figure><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p><code>flex-flow</code> 属性是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p><code>justify-content</code> 属性定义了子容器在主轴上的对齐方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    justify-content: flex-start;      <span class="comment">// 默认，左对齐</span></span><br><span class="line">    justify-content: flex-end;        <span class="comment">// 右对齐</span></span><br><span class="line">    justify-content: center;          <span class="comment">// 居中</span></span><br><span class="line">    justify-content: space-between;   <span class="comment">// 两端对齐，项目之间的间隔都相等。</span></span><br><span class="line">    justify-content: space-around;    <span class="comment">// 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="7.png" alt=""></p><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p><code>align-items</code>属性定义子容器在交叉轴上如何对齐。老规矩，show you the code;<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    align-items: flex-start;    <span class="comment">// 交叉轴的起点对齐。</span></span><br><span class="line">    align-items: flex-end;      <span class="comment">// 交叉轴的终点对齐。</span></span><br><span class="line">    align-items: center;        <span class="comment">// 交叉轴的中点对齐。</span></span><br><span class="line">    align-items: baseline;      <span class="comment">// 项目的第一行文字的基线对齐。</span></span><br><span class="line">    align-items: stretch;       <span class="comment">// 默认，如果项目未设置高度或设为auto，将占满整个容器的高度。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="8.png" alt="" title="" class="">                <p></p>            </figure><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p><code>align-content</code> 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    align-content: flex-start;   <span class="comment">// 与交叉轴的起点对齐</span></span><br><span class="line">    align-content; flex-end;     <span class="comment">// 与交叉轴的终点对齐。</span></span><br><span class="line">    align-content: center;       <span class="comment">// 与交叉轴的中点对齐。</span></span><br><span class="line">    align-content: space-between;<span class="comment">// 与交叉轴两端对齐，轴线之间的间隔平均分布。</span></span><br><span class="line">    align-content: space-around; <span class="comment">// 每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</span></span><br><span class="line">    align-content: stretch;     <span class="comment">// 默认 轴线占满整个交叉轴。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="9.png" alt="[此图出自菜鸟教程]" title="" class="">                <p>[此图出自菜鸟教程]</p>            </figure><h2 id="子容器属性"><a href="#子容器属性" class="headerlink" title="子容器属性"></a>子容器属性</h2><p>子容器也有 6 个属性：</p><ul><li>order：子容器的排列顺序</li><li>flex-grow：子容器剩余空间的拉伸比例</li><li>flex-shrink：子容器超出空间的压缩比例</li><li>flex-basis：子容器在不伸缩情况下的原始尺寸</li><li>flex：子元素的 flex 属性是 flex-grow,flex-shrink 和  flex-basis 的简写</li><li>align-self 允许单个项目有与其他项目不一样的对齐方式</li></ul><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p><code>order</code> 属性定义项目的排列顺序。数值越小，排列越靠前，默认为 0。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">   order: num; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="10.png" alt="" title="" class="">                <p></p>            </figure><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p><code>flex-grow</code> 属性定义子容器的伸缩比例。按照该比例给子容器分配空间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    flex-grow: num; <span class="comment">//默认为零</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="11.png" alt="" title="" class="">                <p></p>            </figure><figure class="image-box">                <img src="12.png" alt="" title="" class="">                <p></p>            </figure><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    flex-shrink: num; <span class="comment">// default 1 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="13.png" alt="[不设置的情况下]" title="" class="">                <p>[不设置的情况下]</p>            </figure><figure class="image-box">                <img src="14.png" alt="[把第二个子盒子的flex-shrink设置为0]" title="" class="">                <p>[把第二个子盒子的flex-shrink设置为0]</p>            </figure><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p><code>flex-basis</code>属性定义了子容器在不伸缩情况下的原始尺寸，主轴为横向时代表宽度，主轴为纵向时代表高度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    flex-basis: <span class="xml"><span class="tag">&lt;<span class="name">length</span>&gt;</span> | auto; /* default auto */</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="15.png" alt="[]" title="" class="">                <p>[]</p>            </figure><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>子元素的 <code>flex</code> 属性是 <code>flex-grow</code>,<code>flex-shrink</code> 和 <code>flex-basis</code> 的简写，默认值为 0 1 auto。后两个属性可选。</p><p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</p><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>子容器的<code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖父容器 <code>align-items</code>属性。默认值为 auto，表示继承父元素的 align-items属性，如果没有父元素，则等同于 stretch。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    align-self: auto;             <span class="comment">// 继承父元素的 align-items 属性</span></span><br><span class="line">    align-self: flex-start;       <span class="comment">// 交叉轴的起点对齐。</span></span><br><span class="line">    align-self: flex-end;         <span class="comment">// 交叉轴的终点对齐。</span></span><br><span class="line">    align-self: center;           <span class="comment">// 交叉轴的中点对齐。</span></span><br><span class="line">    align-self: baseline;         <span class="comment">// 项目的第一行文字的基线对齐。</span></span><br><span class="line">    align-self: stretch;          <span class="comment">// 默认，如果项目未设置高度或设为auto，将占满整个容器的高度。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> CSS </tag>
            
            <tag> flex弹性布局 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title> js特效之瀑布流</title>
      <link href="/blog/2018/08/24/js%E7%89%B9%E6%95%88%E4%B9%8B%E7%80%91%E5%B8%83%E6%B5%81/"/>
      <url>/blog/2018/08/24/js%E7%89%B9%E6%95%88%E4%B9%8B%E7%80%91%E5%B8%83%E6%B5%81/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>js中的特效部分真的挺有意思，不需要篇幅过长的代码就可以写出一个小玩意儿来获得内心得一点点成就感，而且还可以加入一些自己的想法和设计，这篇文章记录下我封装的实现瀑布流的方法</p><h1 id="何为瀑布流"><a href="#何为瀑布流" class="headerlink" title="何为瀑布流"></a>何为瀑布流</h1><p>说白了就是一堆照片的排列，但这些照片的排列是有一定规则的，语言表达能力差，show you the picture:</p><figure class="image-box">                <img src="1.png" alt="" title="" class="">                <p></p>            </figure><p>so,can you see that? 我都看出特点了，各位一定也能看出来，我们总结一下这些图片的<code>规律</code>：</p><ul><li><strong>宽度相同</strong></li><li><strong>高度不同</strong></li><li><strong>排列特别整齐</strong></li></ul><h1 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a>实现逻辑</h1><p>瀑布流效果的实现逻辑非常简单，我大致给它分为如下几点：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">首先我们先准备一个父元素box，给它设置宽度高度然后将其居中，我们的所有照片就在这个box中乖乖排列</span><br><span class="line">第一步： 计算一行放多少张照片</span><br><span class="line">第二步： 遍历所有照片，把第一行照片的高度存入一个数组当中 </span><br><span class="line">第三步： 求出第一行照片的最低高度，把下一张放它屁股后面</span><br><span class="line">第四步： 更改数组中最小的那一个值为：最低高度+第二行第一张照片的高度</span><br><span class="line">第五步： 重复三四步</span><br></pre></td></tr></table></figure></p><p>下面<code>show the code</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waterFull</span> (<span class="params">parent,childrens</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> main = $(<span class="string">'.main'</span>);</span><br><span class="line">    <span class="comment">// 获取屏幕宽度</span></span><br><span class="line">    <span class="keyword">let</span> clientWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">    <span class="keyword">let</span> width  = childrens[<span class="number">0</span>].offsetWidth;</span><br><span class="line">    <span class="comment">// 屏幕宽度除以一个小盒子的宽度，确定列数</span></span><br><span class="line">    <span class="keyword">let</span> columns = <span class="built_in">parseInt</span>(clientWidth/childrens[<span class="number">0</span>].offsetWidth);</span><br><span class="line">    <span class="comment">// 确定父盒子的宽度  一个子元素的宽度乘以列数</span></span><br><span class="line">    main.style.width = columns*childrens[<span class="number">0</span>].offsetWidth + <span class="string">'px'</span>;</span><br><span class="line">    <span class="comment">// 存放第一行子元素的高度</span></span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;childrens.length;i++)&#123; </span><br><span class="line">        <span class="keyword">if</span>(i&lt;columns)&#123;</span><br><span class="line">            arr.push(childrens[i].offsetHeight);</span><br><span class="line">            <span class="comment">// 第一排不需要添加绝对定位 通过box1类来控制定位</span></span><br><span class="line">            childrens[i].classList.remove(<span class="string">'box1'</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 除了第一排，其他的都需要绝对定位</span></span><br><span class="line">            childrens[i].classList.add(<span class="string">'box1'</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 找出最小数组中的最小高度</span></span><br><span class="line">            <span class="keyword">let</span> minHeight = <span class="built_in">Math</span>.min(...arr);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> minIndex = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 找出最小高度在数组中对应的index</span></span><br><span class="line">            minIndex =  arr.findIndex(<span class="function">(<span class="params">value,index</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> value == minHeight;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将图片放到最小高度的图片屁股后边</span></span><br><span class="line">            childrens[i].style.left = minIndex*width + <span class="string">'px'</span>;</span><br><span class="line">            childrens[i].style.top = minHeight + <span class="string">'px'</span>;</span><br><span class="line">            <span class="comment">// 更新数组中存放的高度</span></span><br><span class="line">            arr[minIndex] += childrens[i].offsetHeight; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是外层容器</span></span><br><span class="line"><span class="keyword">let</span> bigbox = <span class="built_in">document</span>.querySelector(<span class="string">".box"</span>);</span><br><span class="line"><span class="comment">//这是所有图片</span></span><br><span class="line"><span class="keyword">let</span> smallbox = <span class="built_in">document</span>.querySelectorAll(<span class="string">".sbox"</span>);</span><br><span class="line"></span><br><span class="line">waterfull(bigbox,smallbox);</span><br></pre></td></tr></table></figure><p>OK搞定，下次遇到使用瀑布流的地方只要调用<code>waterfull()</code>函数，把图片的外层容器，和装着所有图片的数组传进去即可！</p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> javascript </category>
          
          <category> 特效 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> javascript </tag>
            
            <tag> 特效 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js中的原型链，prototype和和_proto_的关系</title>
      <link href="/blog/2018/08/19/js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%EF%BC%8Cprototype%E5%92%8C%E5%92%8C-proto-%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/blog/2018/08/19/js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%EF%BC%8Cprototype%E5%92%8C%E5%92%8C-proto-%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      <content type="html"><![CDATA[<p>原型链是实现继承的主要方式，其基本思想就是利用原型链让一个引用类型继承另一个引用类型的属性和方法；举个栗子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">Person.prototype.Say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Person say"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Man = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Man.prototype = <span class="keyword">new</span> Person();<span class="comment">//这句是重点</span></span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Man();</span><br><span class="line">man.Say();  <span class="comment">//Person say</span></span><br></pre></td></tr></table></figure></p><p>那么<code>Man.prototype = new Person();</code>这句话是如何实现继承的呢？在回答这个问题之前，我们先来看看<code>new</code>的过程中的发生了什么：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'hrh'</span>;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">21</span>;</span><br><span class="line">&#125;;</span><br><span class="line">Person.prototype.Say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Person say"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.Say();</span><br></pre></td></tr></table></figure></p><p>我们可以把new的过程拆分成以下几步：</p><ul><li>创建一个新对象</li><li>将构造函数的作用域赋给新对象 </li><li>将新对象的<strong>proto</strong>属性指向构造函数的prototype</li><li>执行构造函数中的代码</li><li>返回创建的新对象 </li></ul><p>所以对于上边的构造函数，在<code>new</code>的过程中，引擎在底层给你这么干了👇<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个新对象</span></span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把构造函数的作用域赋给新对象</span></span><br><span class="line">    Person.call(obj);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将新对象的__proto__属性指向构造函数的prototype</span></span><br><span class="line">    obj.__proto__ = Person.prototype;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行构造函数中的代码</span></span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'hrh'</span>;</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回新创建的对象</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其实每个对象的内部都有一个<em>proto</em>属性，在<code>new</code>的过程中，实例对象<code>p</code>内部的<strong>proto</strong>属性就会指向构造函数内部的prototype属性,当调用<code>p.Say()</code>方法时，会先去p内部找<code>Say()</code>方法，如果找不到则会去找<em>proto</em>对象，而此时的<em>proto</em>对象正指向构造函数的prototype对象,所有就会去构造函数内部的prototype对象内部找；<br>这点明白以后我们再回去看开头那个栗子,<code>var p = new Person();</code>这句话，刚才我们说p内部的<em>proto</em>属性会指向构造函数内部的prototype属性，类比一下，那么<code>Man.prototype = new Person();</code>这句话内部发生了什么呢？没错Man.prototype内部的<em>proto</em>属性会指向父类构造函数内部的prototype对象；</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>前面说过每个对象的内部都有一个<em>proto</em>对象，当我们调用man.Say()方法时，会先去man内部找，man内部找不到就回去找内部的<em>proto</em>对象，<em>proto</em>对象指向Man.prototype,再在这里面找，还找不到，再找<em>proto</em>(Man.prototype内部的),而此时Man.prototype内部的<em>proto</em>属性正指向父类的构造函数的prototype，再继续寻找下去，直到找到为止，如果一直找不到呢？链条的顶部就是<code>Object.prototype</code>(Object.prototype也是一个对象，既然是对象，那么它就是通过Object构造函数创建出来的，那么结合上面讲的，object.prototype内部也有个指向构造函数的proto属性),而<code>Object.prototype</code>内部的<code>proto</code>属性为<code>null</code>；<br><figure class="image-box">                <img src="1.png" alt="[]" title="" class="">                <p>[]</p>            </figure></p><p><strong>这也就是原型链的实现原理。最后，其实prototype只是一个假象，他在实现原型链中只是起到了一个辅助作用，换句话说，他只是在new的时候有着一定的价值，而原型链的本质，其实在于<strong>proto</strong>！</strong></p><blockquote><p><strong>proto</strong>、prototype傻傻分不清楚？ 记住以下两点:<br><strong>proto</strong>是每个对象都有的一个属性，而prototype是函数才会有的属性。<br><strong>proto</strong>指向的是当前对象的原型对象，而prototype指向的，是以当前函数作为构造函数构造出来的对象的原型对象;</p></blockquote>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6语法之箭头函数</title>
      <link href="/blog/2018/08/14/ES6%E8%AF%AD%E6%B3%95%E4%B9%8B%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
      <url>/blog/2018/08/14/ES6%E8%AF%AD%E6%B3%95%E4%B9%8B%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>  使用ES6箭头函数也有一小段时间了，虽然用起来特别简洁和方便，但是里面的一些雷区老是踩到，今天又系统的学习了一下，这篇笔记主要记录箭头函数里的this指向问题还有箭头函数的使用禁区，也方便以后查阅和复习；</p><hr><h1 id="箭头函数使用注意点"><a href="#箭头函数使用注意点" class="headerlink" title="箭头函数使用注意点"></a>箭头函数使用注意点</h1>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">函数体内的<span class="keyword">this</span>对象，就是定义时所在的对象，而不是使用时所在的对象。</span><br><span class="line">不可以当作构造函数（内部没有<span class="keyword">this</span>指针），也就是说，不可以使用<span class="keyword">new</span>命令。</span><br><span class="line">不可以使用<span class="built_in">arguments</span>对象，该对象在函数体内不存在。如果要用，可以用rest参数代替。</span><br><span class="line">不可以使用<span class="keyword">yield</span>命令，因此箭头函数不能用作Generator函数。</span><br></pre></td></tr></table></figure><p>今天重点来记录一下第一条。</p><h2 id="关于this对象"><a href="#关于this对象" class="headerlink" title="关于this对象"></a>关于this对象</h2><p>先来看下ES5中的this对象<code>js高级程序设计（第三版）</code>里有这么个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"My obj"</span>,</span><br><span class="line">        getNameFunc :<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.getNameFunc()()); <span class="comment">// The Window</span></span><br></pre></td></tr></table></figure></p><p>有人会认为输出“My obj”,但其实事实是：每个函数在被调用时都会自动获得两个特殊变量：<code>this</code>和<code>arguments</code>，内部函数在搜索这两个变量时只会搜索到其活动变量为止,内部函数的活动变量只包括自身活动对象,外部函数<code>getNameFunc</code>的活动对象和全局变量对象,不包括obj的，因此永远不可能直接访问外部函数的这两个变量;</p><p><strong>看一下书上的解决方案</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"My obj"</span>,</span><br><span class="line">        getNameFunc :<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> that.name</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.getNameFunc()()); <span class="comment">// My obj,</span></span><br></pre></td></tr></table></figure></p><p>通过缓存this，就可以拿到期待的结果。但是这样确实有点麻烦，箭头函数便可以很好的解决这个问题；<br>看下面栗子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"My obj"</span>,</span><br><span class="line">        getNameFunc :<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.getNameFunc()()); <span class="comment">// My obj,</span></span><br></pre></td></tr></table></figure></p><p>用箭头函数为什么可以解决呢？其实箭头函数内部是不绑定this的，也就是说它<strong>根本没有自己的this</strong>，它内部的this就是外层代码块的this；</p><p><strong>小结</strong></p><blockquote><p>箭头函数中没有this，在箭头函数内部使用this，是使用的外层代码块的this。</p></blockquote><hr><h1 id="箭头函数使用禁忌"><a href="#箭头函数使用禁忌" class="headerlink" title="箭头函数使用禁忌"></a>箭头函数使用禁忌</h1><h2 id="对象字面量中使用"><a href="#对象字面量中使用" class="headerlink" title="对象字面量中使用"></a>对象字面量中使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line">    array: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    sum: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.array.reduce(<span class="function">(<span class="params">result, item</span>) =&gt;</span> result + item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo.sum(); <span class="comment">// Throws"TypeError: Cannot read property 'reduce' of undefined"</span></span><br></pre></td></tr></table></figure><p>在这个栗子中，this是取不到array的，上面咱们说过箭头函数内部的this就是外层代码块的this，有人会想，外层代码块这不是<code>foo</code>么，怎么取不到了，这里有个注意点：<strong>对象的一对大括号是构不成代码块的</strong>，所以外层代码块的this就是window，这也是为什么（this===window）打印<code>true</code>的原因，要想取到array的话只能乖乖使用传统<code>function</code>了；</p><h2 id="在对象原型中使用"><a href="#在对象原型中使用" class="headerlink" title="在对象原型中使用"></a>在对象原型中使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">this</span>.Name = name;</span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype.sayName = <span class="function"><span class="params">()</span> =&gt;</span> &#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.Name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">'wc'</span>);  </span><br><span class="line">cat.sayName(); <span class="comment">// =&gt; undefined</span></span><br></pre></td></tr></table></figure><p>原理同上，这里的this同样指向window，使用传统方式即可正常工作</p><h2 id="回调函数中使用"><a href="#回调函数中使用" class="headerlink" title="回调函数中使用"></a>回调函数中使用</h2><p>在dom元素上绑定事件监听函数是非常普遍的行为，在dom事件被触发时，回调函数中的this指向该dom,可当我们使用箭头函数时：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">button.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="keyword">this</span>.innerHTML = <span class="string">'Clicked button'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>毫无疑问，箭头函数是一个很棒的特性,但有一些情况下，使用箭头函数也有一些不便，不能在对象字面量中使用，不能再对象原型中使用，不能用作回调函数，内部没有this不能用作构造函数等等。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> ES6语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> ES6语法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo+Coding搭建个人博客及绑定个人域名</title>
      <link href="/blog/2018/08/11/Hexo-Coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%8F%8A%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"/>
      <url>/blog/2018/08/11/Hexo-Coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%8F%8A%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/</url>
      <content type="html"><![CDATA[<p>关于这个主题<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">hexo官方文档</a>上说的很详细，但还是很难仅通过一篇文章就能过一口气完美搭建，中间还是踩到不少雷（一把辛酸泪），所以还是想拿这篇文章来记录下。<br><a id="more"></a></p><hr><h1 id="技术博客的选择"><a href="#技术博客的选择" class="headerlink" title="技术博客的选择"></a>技术博客的选择</h1><p>现在网上很多的教程都是基于<strong>hexo+github</strong>的，包括我之前也是托管在Github Pages上面，但是由于是国外服务器所以访问起来有点慢（其实相当慢，我会瞎说？）于是朝coding投怀送抱，支持下国产。</p><h1 id="安装必要依赖"><a href="#安装必要依赖" class="headerlink" title="安装必要依赖"></a>安装必要依赖</h1><p>这两个环境直接下载安装就行了，应该不会有什么大问题</p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://gitforwindows.org/" target="_blank" rel="noopener">Git</a></li></ul><h1 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h1><p>安装好git以及node.js之后，在电脑的任意盘里新建一个空文件夹，命名随意(比如<code>blog</code>)，最好是纯英文。然后打开这个空文件夹，鼠标右键选择Git Bash。</p><p>输入以下一下命令安装Hexo<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br><span class="line">可能会安装失败（这是我遇到的第一个坑），安装失败选择下边这种方式(淘宝源安装):</span><br><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br><span class="line">cnpm install hexo-cli -g</span><br><span class="line">Hexo安装完成之后，输入下面指令初始化Hexo</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure></p><h1 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h1><p>在你刚才新建的空文件夹（blog）下右键选择<code>Git Bash</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean # 清除历史生成的静态文件</span><br><span class="line">hexo generate # 生成静态文件(简写：hexo g)</span><br><span class="line">hexo server # 启动本地服务(简写: hexo s)</span><br></pre></td></tr></table></figure></p><p> 一顿操作猛如虎以后，看到下面这条指令，代表服务开启成功，<em>浏览器中输入以下网站</em>就可以看到刚刚搭建的静态网页。<br> <code>INFO  Start processing</code><br><code>INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code></p><h1 id="Coding-pages-设置"><a href="#Coding-pages-设置" class="headerlink" title="Coding pages 设置"></a>Coding pages 设置</h1><p>现在我们已经在本地搭建好了我们的博客，麻溜儿部署起来让大家看到。</p><p>先打开<a href="https://coding.net/" target="_blank" rel="noopener">coding</a>,右上角注册一下。</p><h2 id="创建一个新仓库"><a href="#创建一个新仓库" class="headerlink" title="创建一个新仓库"></a>创建一个新仓库</h2><figure class="image-box">                <img src="0.png" alt="[ 创建新仓库 ]" title="" class="">                <p>[ 创建新仓库 ]</p>            </figure><p><img src="1.png" alt="[ 注意仓库名的格式是固定的，用户名+coding.me 不一致会出错 ]"></p><h2 id="开启静态pages"><a href="#开启静态pages" class="headerlink" title="开启静态pages"></a>开启静态pages</h2><p><img src="2.png" alt="[这是开启展示功能 ]"></p><h3 id="绑定个人域名，如果不需要可直接跳到添加部署密钥"><a href="#绑定个人域名，如果不需要可直接跳到添加部署密钥" class="headerlink" title="绑定个人域名，如果不需要可直接跳到添加部署密钥"></a>绑定个人域名，如果不需要可直接跳到添加部署密钥</h3><figure class="image-box">                <img src="3.png" alt="[点击设置]" title="" class="">                <p>[点击设置]</p>            </figure><figure class="image-box">                <img src="4.png" alt="[将你的个人域名输入 ]" title="" class="">                <p>[将你的个人域名输入 ]</p>            </figure><blockquote><p>注意个人域名的解析参考 <a href="https://coding.net/help/doc/pages/domain.html" target="_blank" rel="noopener">coding 官方帮助文档</a></p></blockquote><h2 id="添加部署密钥"><a href="#添加部署密钥" class="headerlink" title="添加部署密钥"></a>添加部署密钥</h2><p>打开<code>Git bash</code>，输入<code>ssh-keygen -t rsa -C &quot;897691781@qq.com</code>“,这个邮箱地址换成你的。连续四次回车就生成了一对密钥。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/韓仁輝/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/韓仁輝/.ssh/id_rsa.pub.</span><br></pre></td></tr></table></figure></p><p>它会告诉你密钥生成在那个文件夹,上面是我的密钥生成路径，下面要相应替换成你的，使用cat来查看公钥内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /c/Users/韓仁輝/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>复制输出的内容，打开<code>coding</code>你刚刚创建的项目，点击页面左侧设置里的部署公钥，点击新建公钥，把你刚刚复制的内容粘贴进去就可以了。</p><h1 id="git部署静态界面"><a href="#git部署静态界面" class="headerlink" title="git部署静态界面"></a>git部署静态界面</h1><p>通过git将你的静态页面push到你刚刚创建的coding pages上去</p><p>还是在<code>blog</code>根目录下，右键<code>Git Bash</code>，输入以下指令安装一个hexo的部署工具<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>安装完成以后，需要配置部署路径，打开blog文件夹下的<code>_config.yml</code>（打开方式别选记事本，编码不支持中文），下滑找到<code>deploy:</code>，将deploy修改为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repo:  git@git.coding.net:HanRenHui/HanRenHui.coding.me.git #注意将用户名换为你自己的</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>别忘记<code>ctril+s</code>保存一下，还是在<code>blog/</code>目录下，用hexo命令完成最终部署：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br><span class="line"># 2 3可以简写为 hexo g -d</span><br></pre></td></tr></table></figure></p><p>恭喜，打开浏览器在地址栏输入用户名.coding.me（有个人域名直接输入个人域名）就可以访问自己的博客啦!!!</p>]]></content>
      
      <categories>
          
          <category> 教程 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2018/08/04/hello-world/"/>
      <url>/blog/2018/08/04/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
