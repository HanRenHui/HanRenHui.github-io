<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>浮动-塌陷问题</title>
      <link href="/blog/2018/09/24/%E6%B5%AE%E5%8A%A8-%E5%A1%8C%E9%99%B7%E9%97%AE%E9%A2%98/"/>
      <url>/blog/2018/09/24/%E6%B5%AE%E5%8A%A8-%E5%A1%8C%E9%99%B7%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="一点废话"><a href="#一点废话" class="headerlink" title="一点废话"></a>一点废话</h1><p>昨晚学习了解决浮动带来的父元素高度塌陷的问题，解决方法还挺多，就在这记录一下加深下印象，也方便后边的查阅；老规矩，废话不多说，直奔主题;</p><h1 id="什么是高度塌陷"><a href="#什么是高度塌陷" class="headerlink" title="什么是高度塌陷"></a>什么是高度塌陷</h1><p>大家都知道块级元素的高度会由子元素撑起来，但是子元素一旦浮动以后，块级元素的高度就没有了，就像下图这样：</p><figure class="image-box">                <img src="未浮动.png" alt="[未浮动]" title="" class="">                <p>[未浮动]</p>            </figure><figure class="image-box">                <img src="浮动.png" alt="[浮动以后]" title="" class="">                <p>[浮动以后]</p>            </figure><p>其实最简单的解决方式就是给<strong>块级元素一个高度</strong>，让它不依赖子元素的高度，但是在实际应用当中，我们很少会给父元素高度，因为子元素的内容是从后台取出来的，有多少内容你也不知道，自然不能给明确的高度；那怎么搞? 不急往下看；</p><h1 id="方式一-开启父元素BFC"><a href="#方式一-开启父元素BFC" class="headerlink" title="方式一:开启父元素BFC"></a>方式一:开启父元素BFC</h1><p>至于BFC的一些具体概念，在这不做阐述，有兴趣可以自行查阅，我把 <a href="https://juejin.im/post/59b73d5bf265da064618731d" target="_blank" rel="noopener">链接放这</a>;</p><h2 id="开启方式"><a href="#开启方式" class="headerlink" title="开启方式"></a>开启方式</h2><ul><li>设置父元素为浮动元素</li><li>设置父元素为绝对定位</li><li>设置父元素为行内块级元素(display: inline-block)</li><li>设置父元素overflow: hidden</li></ul><p>如果只是单纯的想要开启BFC，前三种方式有点暴力，所以大多数情况下，我们选择<strong>第四种</strong></p><h2 id="开启后的特性"><a href="#开启后的特性" class="headerlink" title="开启后的特性"></a>开启后的特性</h2><ul><li>父元素的垂直外边距不会与子元素的重叠</li><li>不会被浮动元素盖住</li><li>可以包含浮动元素</li></ul><p>我们就是利用<strong>第三点</strong>来解决高度塌陷问题</p><h1 id="方式二-在塌陷的父元素的最后添加一个空白的div，然后对该div进行清除浮动"><a href="#方式二-在塌陷的父元素的最后添加一个空白的div，然后对该div进行清除浮动" class="headerlink" title="方式二: 在塌陷的父元素的最后添加一个空白的div，然后对该div进行清除浮动"></a>方式二: 在塌陷的父元素的最后添加一个空白的div，然后对该div进行清除浮动</h1><p>像这样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"box1"</span>&gt;</span><br><span class="line">&lt;div id=<span class="string">"box2"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div id =<span class="string">'box3'</span> style=<span class="string">"clear:both"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></p><p>为什么这样就可以解决问题了呢，这里涉及一个清除浮动的问题，<code>clear:both</code>,清除浮动对该元素的影响，换句话说：前一个元素浮动以后，因为浮动元素脱离了标准流，后边元素的位置是会发生变化的，如果不想发生变化，就需要给后边的元素加上一句：<code>clear:both</code>;<br>应用到我们这几行代码中就是，box3的位置不会因为box2的浮动而变化，box3一直在原地撑着，那么box1的高度也不会发生变化。over！</p><h1 id="方式三：使用after伪类，向父元素后添加一个块元素，并对其清除浮动"><a href="#方式三：使用after伪类，向父元素后添加一个块元素，并对其清除浮动" class="headerlink" title="方式三：使用after伪类，向父元素后添加一个块元素，并对其清除浮动"></a>方式三：使用after伪类，向父元素后添加一个块元素，并对其清除浮动</h1><p>大家可能发现了，方式二的解决方法并不是很好，因为它平白无故在box1里添加了一个多余标签，方式三就是为了解决掉方式二存在的问题，同时又能解决塌陷<br>css代码如下<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line"><span class="attribute">display</span>:block;</span><br><span class="line"><span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>html代码如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span> <span class="attr">class</span> = <span class="string">'clearfix'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>方式二和方式三的解决办法是一样的，都是在子元素后边添加一些内容，并对这些内容清除浮动，但是方式三相比方式二不需要添加多余的结构</strong></p><p>以上</p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSS </category>
          
          <category> 浮动 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> CSS </tag>
            
            <tag> 浮动 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS常见布局方式(二)</title>
      <link href="/blog/2018/09/03/CSS%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F-%E4%BA%8C/"/>
      <url>/blog/2018/09/03/CSS%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F-%E4%BA%8C/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章记录下<code>圣杯布局</code>和<code>双飞翼布局</code>，两种布局达到效果上基本相同，都是两边两栏宽度固定，中间栏宽度自适应。在HTML结构上中间栏在最前面保证了最先渲染中间提升性能；</p><h1 id="圣杯布局的实现"><a href="#圣杯布局的实现" class="headerlink" title="圣杯布局的实现"></a>圣杯布局的实现</h1><p>圣杯布局的关键在于让中间栏的宽度可以自适应，想要适应浏览器宽度的变化，用百分比来设置中间栏的宽度最合适不过了，所以我们可以将中间部分的宽度设置为<strong>100%</strong>，同时需要左右两栏紧靠浏览器两端，废话不多说，上代码<br>既然是三栏布局，那么我们需要三个盒子，外加给它套个容器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span>我是测试我是测试我是测试我是测试我是测试试我是测试我是测试我是测试试我是测试我是测试我是测试试我是测试我是测试我是测试试我是测试我是测试我是测试试我是测试我是测试我是测试试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试我是测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>我是left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>我是right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>给它添加如下的CSS样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: seagreen;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.middle</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: steelblue;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前是这个逼样👇</p><figure class="image-box">                <img src="1.png" alt="" title="" class="">                <p></p>            </figure><p>接下来我们把这仨哥们放到同一行，这需要利用<strong>负margin</strong>的技巧：我们给left和right的CSS样式做如下修改：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在布局变成这样👇<br><figure class="image-box">                <img src="2.png" alt="" title="" class="">                <p></p>            </figure></p><p>此时中间部分的内容是盖住的，为了内容不被盖住，我们可以通过给父盒子设置<code>padding</code>的方式来让中间的内容只显示在中间；同时为了两边的盒子位置不变，我们需要添加如下的CSS样式代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">left</span>:-<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">right</span>:-<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在是最终布局：👇<br><figure class="image-box">                <img src="3.png" alt="" title="" class="">                <p></p>            </figure><br>试着压缩浏览器宽度后：👇<br><figure class="image-box">                <img src="4.png" alt="" title="" class="">                <p></p>            </figure></p><h1 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h1><p>其实双飞翼布局是为了解决圣杯布局的弊端提出的，上面的圣杯布局的代码存在一个问题，当你将浏览器宽度缩短到一定程度，使得中间子元素的宽度比左右子元素宽度小的时候，这时候布局就会出现问题。所以首先，这提示了我们在使用圣杯布局的时候一定要设置整个容器的最小宽度。</p><figure class="image-box">                <img src="5.png" alt="" title="" class="">                <p></p>            </figure><h1 id="双飞翼布局和圣杯布局的区别"><a href="#双飞翼布局和圣杯布局的区别" class="headerlink" title="双飞翼布局和圣杯布局的区别"></a>双飞翼布局和圣杯布局的区别</h1><blockquote><p>圣杯布局和双飞翼布局解决问题的方案在前一半是相同的，也就是三栏全部float浮动，但左右两栏加上负margin让其跟中间栏div并排，以形成三栏布局。<br>不同在于解决”中间栏div内容不被遮挡“问题的思路不一样：圣杯布局，为了中间div内容不被遮挡，将中间div设置了左右padding-left和padding-right后，将左右 &gt; 两个div用相对布局position: relative并分别配合right和left属性，以便左右两栏div移动后不遮挡中间div。<br>双飞翼布局，为了中间div内容不被遮挡，直接在中间div内部创建子div用于放置内容，在该子div里用margin-left和margin-right为左右两栏div留出位置。</p></blockquote><figure class="image-box">                <img src="6.png" alt="" title="" class="">                <p></p>            </figure>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> CSS </tag>
            
            <tag> 圣杯布局 </tag>
            
            <tag> 双飞翼布局 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS常见布局方式(一)</title>
      <link href="/blog/2018/09/02/CSS%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/"/>
      <url>/blog/2018/09/02/CSS%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h1><p>布局的传统解决方案，基于盒状模型，依赖 <code>display</code>属性 + <code>position</code>属性 + <code>float</code>属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。于是W3C提出了一种新的方案—-Flex布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。<br><a id="more"></a></p><figure class="image-box">                <img src="1.png" alt="" title="" class="">                <p></p>            </figure><h2 id="什么是flex布局"><a href="#什么是flex布局" class="headerlink" title="什么是flex布局"></a>什么是flex布局</h2><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。flex 是一种新型的布局方式，使用该布局方式可以实现几乎所有你想要的效果。</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>flex的使用方法很简单，只需要将其 display 属性设置为 flex 就可以，也可以设置行内的 flex。<strong>注意，设为 Flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</strong></p><h2 id="碎碎的概念"><a href="#碎碎的概念" class="headerlink" title="碎碎的概念"></a>碎碎的概念</h2><p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。</p><figure class="image-box">                <img src="2.png" alt="[]" title="" class="">                <p>[]</p>            </figure><blockquote><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交&gt;叉轴的开始位置叫做cross start，结束位置叫做cross end。<br>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p></blockquote><h2 id="父容器属性"><a href="#父容器属性" class="headerlink" title="父容器属性"></a>父容器属性</h2><p>父容器上有六个属性：</p><ul><li>flex-direction：主轴的方向（默认水平）。</li><li>flex-wrap：超出父容器子容器的排列样式。</li><li>flex-flow：flex-direction 属性和 flex-wrap 属性的简写形式。</li><li>justify-content：子容器在主轴的排列方向。</li><li>align-items：子容器在交叉轴的排列方向。</li><li>align-content：多根轴线的对齐方式。</li></ul><h3 id="flex-direction-属性"><a href="#flex-direction-属性" class="headerlink" title="flex-direction 属性"></a>flex-direction 属性</h3><p>这个属性是用来设置主轴的方向的，默认是水平方向，也可以用来设置其他方向，show you the code：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    flex-direction: row;                <span class="comment">// 默认值，主轴为水平方向，起点在左端。</span></span><br><span class="line">    flex-direction: row-reverse;        <span class="comment">// 主轴为水平方向，起点在右端。</span></span><br><span class="line">    flex-direction: column;             <span class="comment">// 主轴为垂直方向，起点在上。</span></span><br><span class="line">    flex-direction: column-reverse;     <span class="comment">// 主轴为垂直方向，起点在下。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="3.png" alt="[]" title="" class="">                <p>[]</p>            </figure><h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p><code>flex-wrap</code> 属性决定子容器如果在一条轴线排不下时，如何换行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    flex-wrap: nowrap;          <span class="comment">// 默认，不换行</span></span><br><span class="line">    flex-wrap: wrap;            <span class="comment">// 换行，第一行在上方。</span></span><br><span class="line">    flex-wrap: wrap-reverse     <span class="comment">// 换行，第一行在下方。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="4.png" alt="[flex-wrap:nowrap(子盒子宽度被挤压)]" title="" class="">                <p>[flex-wrap:nowrap(子盒子宽度被挤压)]</p>            </figure><figure class="image-box">                <img src="5.png" alt="[flex-warp:warp]" title="" class="">                <p>[flex-warp:warp]</p>            </figure><figure class="image-box">                <img src="6.png" alt="[flex-warp:warp-reverse]" title="" class="">                <p>[flex-warp:warp-reverse]</p>            </figure><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p><code>flex-flow</code> 属性是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p><code>justify-content</code> 属性定义了子容器在主轴上的对齐方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    justify-content: flex-start;      <span class="comment">// 默认，左对齐</span></span><br><span class="line">    justify-content: flex-end;        <span class="comment">// 右对齐</span></span><br><span class="line">    justify-content: center;          <span class="comment">// 居中</span></span><br><span class="line">    justify-content: space-between;   <span class="comment">// 两端对齐，项目之间的间隔都相等。</span></span><br><span class="line">    justify-content: space-around;    <span class="comment">// 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="7.png" alt=""></p><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p><code>align-items</code>属性定义子容器在交叉轴上如何对齐。老规矩，show you the code;<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    align-items: flex-start;    <span class="comment">// 交叉轴的起点对齐。</span></span><br><span class="line">    align-items: flex-end;      <span class="comment">// 交叉轴的终点对齐。</span></span><br><span class="line">    align-items: center;        <span class="comment">// 交叉轴的中点对齐。</span></span><br><span class="line">    align-items: baseline;      <span class="comment">// 项目的第一行文字的基线对齐。</span></span><br><span class="line">    align-items: stretch;       <span class="comment">// 默认，如果项目未设置高度或设为auto，将占满整个容器的高度。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="8.png" alt="" title="" class="">                <p></p>            </figure><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p><code>align-content</code> 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    align-content: flex-start;   <span class="comment">// 与交叉轴的起点对齐</span></span><br><span class="line">    align-content; flex-end;     <span class="comment">// 与交叉轴的终点对齐。</span></span><br><span class="line">    align-content: center;       <span class="comment">// 与交叉轴的中点对齐。</span></span><br><span class="line">    align-content: space-between;<span class="comment">// 与交叉轴两端对齐，轴线之间的间隔平均分布。</span></span><br><span class="line">    align-content: space-around; <span class="comment">// 每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</span></span><br><span class="line">    align-content: stretch;     <span class="comment">// 默认 轴线占满整个交叉轴。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="image-box">                <img src="9.png" alt="[此图出自菜鸟教程]" title="" class="">                <p>[此图出自菜鸟教程]</p>            </figure><h2 id="子容器属性"><a href="#子容器属性" class="headerlink" title="子容器属性"></a>子容器属性</h2><p>子容器也有 6 个属性：</p><ul><li>order：子容器的排列顺序</li><li>flex-grow：子容器剩余空间的拉伸比例</li><li>flex-shrink：子容器超出空间的压缩比例</li><li>flex-basis：子容器在不伸缩情况下的原始尺寸</li><li>flex：子元素的 flex 属性是 flex-grow,flex-shrink 和  flex-basis 的简写</li><li>align-self 允许单个项目有与其他项目不一样的对齐方式</li></ul><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p><code>order</code> 属性定义项目的排列顺序。数值越小，排列越靠前，默认为 0。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">   order: num; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="10.png" alt="" title="" class="">                <p></p>            </figure><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p><code>flex-grow</code> 属性定义子容器的伸缩比例。按照该比例给子容器分配空间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    flex-grow: num; <span class="comment">//默认为零</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="11.png" alt="" title="" class="">                <p></p>            </figure><figure class="image-box">                <img src="12.png" alt="" title="" class="">                <p></p>            </figure><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    flex-shrink: num; <span class="comment">// default 1 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="13.png" alt="[不设置的情况下]" title="" class="">                <p>[不设置的情况下]</p>            </figure><figure class="image-box">                <img src="14.png" alt="[把第二个子盒子的flex-shrink设置为0]" title="" class="">                <p>[把第二个子盒子的flex-shrink设置为0]</p>            </figure><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p><code>flex-basis</code>属性定义了子容器在不伸缩情况下的原始尺寸，主轴为横向时代表宽度，主轴为纵向时代表高度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    flex-basis: <span class="xml"><span class="tag">&lt;<span class="name">length</span>&gt;</span> | auto; /* default auto */</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><figure class="image-box">                <img src="15.png" alt="[]" title="" class="">                <p>[]</p>            </figure><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>子元素的 <code>flex</code> 属性是 <code>flex-grow</code>,<code>flex-shrink</code> 和 <code>flex-basis</code> 的简写，默认值为 0 1 auto。后两个属性可选。</p><p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</p><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>子容器的<code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖父容器 <code>align-items</code>属性。默认值为 auto，表示继承父元素的 align-items属性，如果没有父元素，则等同于 stretch。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">    align-self: auto;             <span class="comment">// 继承父元素的 align-items 属性</span></span><br><span class="line">    align-self: flex-start;       <span class="comment">// 交叉轴的起点对齐。</span></span><br><span class="line">    align-self: flex-end;         <span class="comment">// 交叉轴的终点对齐。</span></span><br><span class="line">    align-self: center;           <span class="comment">// 交叉轴的中点对齐。</span></span><br><span class="line">    align-self: baseline;         <span class="comment">// 项目的第一行文字的基线对齐。</span></span><br><span class="line">    align-self: stretch;          <span class="comment">// 默认，如果项目未设置高度或设为auto，将占满整个容器的高度。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> CSS </tag>
            
            <tag> flex弹性布局 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title> js特效之瀑布流</title>
      <link href="/blog/2018/08/24/js%E7%89%B9%E6%95%88%E4%B9%8B%E7%80%91%E5%B8%83%E6%B5%81/"/>
      <url>/blog/2018/08/24/js%E7%89%B9%E6%95%88%E4%B9%8B%E7%80%91%E5%B8%83%E6%B5%81/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>js中的特效部分真的挺有意思，不需要篇幅过长的代码就可以写出一个小玩意儿来获得内心得一点点成就感，而且还可以加入一些自己的想法和设计，这篇文章记录下我封装的实现瀑布流的方法</p><h1 id="何为瀑布流"><a href="#何为瀑布流" class="headerlink" title="何为瀑布流"></a>何为瀑布流</h1><p>说白了就是一堆照片的排列，但这些照片的排列是有一定规则的，语言表达能力差，show you the picture:</p><figure class="image-box">                <img src="1.png" alt="" title="" class="">                <p></p>            </figure><p>so,can you see that? 我都看出特点了，各位一定也能看出来，我们总结一下这些图片的<code>规律</code>：</p><ul><li><strong>宽度相同</strong></li><li><strong>高度不同</strong></li><li><strong>排列特别整齐</strong></li></ul><h1 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a>实现逻辑</h1><p>瀑布流效果的实现逻辑非常简单，我大致给它分为如下几点：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">首先我们先准备一个父元素box，给它设置宽度高度然后将其居中，我们的所有照片就在这个box中乖乖排列</span><br><span class="line">第一步： 计算一行放多少张照片</span><br><span class="line">第二步： 遍历所有照片，把第一行照片的高度存入一个数组当中</span><br><span class="line">第三步： 求出第一行照片的最低高度，把下一张放它屁股后面</span><br><span class="line">第四步： 更改数组中刚才求出的最低高度的数据为：最低高度+第二行第一张照片的高度</span><br><span class="line">第五步： 重复三四步</span><br></pre></td></tr></table></figure></p><p>下面<code>show the code</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">//这是外层容器</span></span><br><span class="line"><span class="keyword">let</span> bigbox = <span class="built_in">document</span>.querySelector(<span class="string">".box"</span>);</span><br><span class="line"><span class="comment">//这是所有图片</span></span><br><span class="line"><span class="keyword">let</span> smallbox = <span class="built_in">document</span>.querySelectorAll(<span class="string">".sbox"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> findindex = <span class="function">(<span class="params">arr,min</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] === min)&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> waterfull = <span class="function">(<span class="params">parent,child</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;smallbox.length;i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> bwidth = bigbox.offsetWidth;</span><br><span class="line">            <span class="keyword">let</span> swidth = smallbox[<span class="number">0</span>].offsetWidth;</span><br><span class="line">        <span class="comment">//这是第一步</span></span><br><span class="line">        <span class="keyword">let</span> column = <span class="built_in">parseInt</span>(bwidth/swidth);</span><br><span class="line">        <span class="comment">//margin是为了每张图片的左侧和底侧 距离下张图片有一定距离</span></span><br><span class="line">        <span class="keyword">let</span> margin = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">let</span> minArr= [];</span><br><span class="line">        <span class="keyword">let</span> sheight = smallbox[i].offsetHeight + margin;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;column)&#123;</span><br><span class="line">            <span class="comment">//这是第二步</span></span><br><span class="line">            minArr.push(sheight);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            smallbox[i].style.position = <span class="string">"absolute"</span>;</span><br><span class="line">            <span class="comment">//这是第三步</span></span><br><span class="line">            <span class="keyword">let</span> minHeight = <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>,minArr);</span><br><span class="line">            <span class="comment">//找出最小值的索引</span></span><br><span class="line">            <span class="keyword">let</span> minindex = findindex(minArr,minHeight);</span><br><span class="line">            smallbox[i].style.left = minindex * (swidth+margin) + <span class="string">'px'</span>;</span><br><span class="line">            smallbox[i].style.top = minHeight + <span class="string">'px'</span>;</span><br><span class="line">            <span class="comment">//这是第四步</span></span><br><span class="line">            minArr[minindex]+= sheight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">waterfull(bigbox,smallbox);</span><br></pre></td></tr></table></figure><p>OK搞定，下次遇到使用瀑布流的地方只要调用<code>waterfull()</code>函数，把图片的外层容器，和装着所有图片的数组传进去即可！</p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> javascript </category>
          
          <category> 特效 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> javascript </tag>
            
            <tag> 特效 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js中的原型链，prototype和和_proto_的关系</title>
      <link href="/blog/2018/08/19/js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%EF%BC%8Cprototype%E5%92%8C%E5%92%8C-proto-%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/blog/2018/08/19/js%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%EF%BC%8Cprototype%E5%92%8C%E5%92%8C-proto-%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      <content type="html"><![CDATA[<p>原型链是实现继承的主要方式，其基本思想就是利用原型链让一个引用类型继承另一个引用类型的属性和方法；举个栗子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">Person.prototype.Say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Person say"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Man = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Man.prototype = <span class="keyword">new</span> Person();<span class="comment">//这句是重点</span></span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Man();</span><br><span class="line">man.Say();  <span class="comment">//Person say</span></span><br></pre></td></tr></table></figure></p><p>那么<code>Man.prototype = new Person();</code>这句话是如何实现继承的呢？在回答这个问题之前，我们先来看看<code>new</code>的过程中的发生了什么：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">Person.prototype.Say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Person say"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.Say();</span><br></pre></td></tr></table></figure></p><p>我们可以把new的过程拆分成以下四步：</p><ul><li>创建一个新对象</li><li>p.<strong>proto</strong>=Person.prototype; </li><li>将构造函数的作用域赋给新对象 </li><li>执行构造函数中的代码，并返回新对象</li></ul><p>最重要的是第三点，其实每个对象的内部都有一个<em>proto</em>对象，在<code>new</code>的过程中，实例对象<code>p</code>内部的<strong>proto</strong>属性就会指向构造函数内部的prototype属性,当调用<code>p.Say()</code>方法时，会先去p内部找<code>Say()</code>方法，如果找不到则会去找<em>proto</em>对象，而此时的<em>proto</em>对象正指向构造函数内部的prototype属性,所有就会去构造函数内部的prototype属性内部找；</p><p>这点明白以后我们再回去看开头那个栗子,<code>var p = new Person();</code>这句话，刚才我们说p内部的<em>proto</em>属性会指向构造函数内部的prototype属性，类比一下，那么<code>Man.prototype = new Person();</code>这句话内部发生了什么呢？没错Man.prototype内部的<em>proto</em>属性会指向构造函数内部的prototype属性；</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>前面说过每个对象的内部都有一个<em>proto</em>对象，当我们调用man.Say()方法时，会先去man内部找，man内部找不到就回去找内部的<em>proto</em>对象，<em>proto</em>对象指向Man.prototype,再在这里面找，还找不到，再找<em>proto</em>(Man.prototype内部的),而此时Man.prototype内部的<em>proto</em>属性正指向父类的构造函数的prototype，再继续寻找下去，直到找到为止；</p><p><strong>这也就是原型链的实现原理。最后，其实prototype只是一个假象，他在实现原型链中只是起到了一个辅助作用，换句话说，他只是在new的时候有着一定的价值，而原型链的本质，其实在于<strong>proto</strong>！</strong></p><blockquote><p><strong>proto</strong>、prototype傻傻分不清楚？ 记住以下两点:<br><strong>proto</strong>是每个对象都有的一个属性，而prototype是函数才会有的属性。<br><strong>proto</strong>指向的是当前对象的原型对象，而prototype指向的，是以当前函数作为构造函数构造出来的对象的原型对象;</p></blockquote><p>最后附上一张超直观原型链图<br><figure class="image-box">                <img src="666.png" alt="[来自掘金]" title="" class="">                <p>[来自掘金]</p>            </figure></p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6语法之箭头函数</title>
      <link href="/blog/2018/08/14/ES6%E8%AF%AD%E6%B3%95%E4%B9%8B%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
      <url>/blog/2018/08/14/ES6%E8%AF%AD%E6%B3%95%E4%B9%8B%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>  使用ES6箭头函数也有一小段时间了，虽然用起来特别简洁和方便，但是里面的一些雷区老是踩到，今天又系统的学习了一下，这篇笔记主要记录箭头函数里的this指向问题还有箭头函数的使用禁区，也方便以后查阅和复习；</p><hr><h1 id="箭头函数使用注意点"><a href="#箭头函数使用注意点" class="headerlink" title="箭头函数使用注意点"></a>箭头函数使用注意点</h1>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">函数体内的<span class="keyword">this</span>对象，就是定义时所在的对象，而不是使用时所在的对象。</span><br><span class="line">不可以当作构造函数（内部没有<span class="keyword">this</span>指针），也就是说，不可以使用<span class="keyword">new</span>命令。</span><br><span class="line">不可以使用<span class="built_in">arguments</span>对象，该对象在函数体内不存在。如果要用，可以用rest参数代替。</span><br><span class="line">不可以使用<span class="keyword">yield</span>命令，因此箭头函数不能用作Generator函数。</span><br></pre></td></tr></table></figure><p>今天重点来记录一下第一条。</p><h2 id="关于this对象"><a href="#关于this对象" class="headerlink" title="关于this对象"></a>关于this对象</h2><p>先来看下ES5中的this对象<code>js高级程序设计（第三版）</code>里有这么个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"My obj"</span>,</span><br><span class="line">        getNameFunc :<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.getNameFunc()()); <span class="comment">// The Window</span></span><br></pre></td></tr></table></figure></p><p>有人会认为输出“My obj”,但其实事实是：每个函数在被调用时都会自动获得两个特殊变量：<code>this</code>和<code>arguments</code>，内部函数在搜索这两个变量时只会搜索到其活动变量为止,内部函数的活动变量只包括自身活动对象,外部函数<code>getNameFunc</code>的活动对象和全局变量对象,不包括obj的，因此永远不可能直接访问外部函数的这两个变量;</p><p><strong>看一下书上的解决方案</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"My obj"</span>,</span><br><span class="line">        getNameFunc :<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> that.name</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.getNameFunc()()); <span class="comment">// My obj,</span></span><br></pre></td></tr></table></figure></p><p>通过缓存this，就可以拿到期待的结果。但是这样确实有点麻烦，箭头函数便可以很好的解决这个问题；<br>看下面栗子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"My obj"</span>,</span><br><span class="line">        getNameFunc :<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.getNameFunc()()); <span class="comment">// My obj,</span></span><br></pre></td></tr></table></figure></p><p>用箭头函数为什么可以解决呢？其实箭头函数内部是不绑定this的，也就是说它<strong>根本没有自己的this</strong>，它内部的this就是外层代码块的this；</p><p><strong>小结</strong></p><blockquote><p>箭头函数中没有this，在箭头函数内部使用this，是使用的外层代码块的this。</p></blockquote><hr><h1 id="箭头函数使用禁忌"><a href="#箭头函数使用禁忌" class="headerlink" title="箭头函数使用禁忌"></a>箭头函数使用禁忌</h1><h2 id="对象字面量中使用"><a href="#对象字面量中使用" class="headerlink" title="对象字面量中使用"></a>对象字面量中使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line">    array: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    sum: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.array.reduce(<span class="function">(<span class="params">result, item</span>) =&gt;</span> result + item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo.sum(); <span class="comment">// Throws"TypeError: Cannot read property 'reduce' of undefined"</span></span><br></pre></td></tr></table></figure><p>在这个栗子中，this是取不到array的，上面咱们说过箭头函数内部的this就是外层代码块的this，有人会想，外层代码块这不是<code>foo</code>么，怎么取不到了，这里有个注意点：<strong>对象的一对大括号是构不成代码块的</strong>，所以外层代码块的this就是window，这也是为什么（this===window）打印<code>true</code>的原因，要想取到array的话只能乖乖使用传统<code>function</code>了；</p><h2 id="在对象原型中使用"><a href="#在对象原型中使用" class="headerlink" title="在对象原型中使用"></a>在对象原型中使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">this</span>.Name = name;</span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype.sayName = <span class="function"><span class="params">()</span> =&gt;</span> &#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.Name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">'wc'</span>);  </span><br><span class="line">cat.sayName(); <span class="comment">// =&gt; undefined</span></span><br></pre></td></tr></table></figure><p>原理同上，这里的this同样指向window，使用传统方式即可正常工作</p><h2 id="回调函数中使用"><a href="#回调函数中使用" class="headerlink" title="回调函数中使用"></a>回调函数中使用</h2><p>在dom元素上绑定事件监听函数是非常普遍的行为，在dom事件被触发时，回调函数中的this指向该dom,可当我们使用箭头函数时：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">button.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">    <span class="keyword">this</span>.innerHTML = <span class="string">'Clicked button'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>毫无疑问，箭头函数是一个很棒的特性,但有一些情况下，使用箭头函数也有一些不便，不能在对象字面量中使用，不能再对象原型中使用，不能用作回调函数，内部没有this不能用作构造函数等等。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> ES6语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> ES6语法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo+Coding搭建个人博客及绑定个人域名</title>
      <link href="/blog/2018/08/11/Hexo-Coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%8F%8A%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"/>
      <url>/blog/2018/08/11/Hexo-Coding%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%8F%8A%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/</url>
      <content type="html"><![CDATA[<p>关于这个主题<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">hexo官方文档</a>上说的很详细，但还是很难仅通过一篇文章就能过一口气完美搭建，中间还是踩到不少雷（一把辛酸泪），所以还是想拿这篇文章来记录下。<br><a id="more"></a></p><hr><h1 id="技术博客的选择"><a href="#技术博客的选择" class="headerlink" title="技术博客的选择"></a>技术博客的选择</h1><p>现在网上很多的教程都是基于<strong>hexo+github</strong>的，包括我之前也是托管在Github Pages上面，但是由于是国外服务器所以访问起来有点慢（其实相当慢，我会瞎说？）于是朝coding投怀送抱，支持下国产。</p><h1 id="安装必要依赖"><a href="#安装必要依赖" class="headerlink" title="安装必要依赖"></a>安装必要依赖</h1><p>这两个环境直接下载安装就行了，应该不会有什么大问题</p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://gitforwindows.org/" target="_blank" rel="noopener">Git</a></li></ul><h1 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h1><p>安装好git以及node.js之后，在电脑的任意盘里新建一个空文件夹，命名随意(比如<code>blog</code>)，最好是纯英文。然后打开这个空文件夹，鼠标右键选择Git Bash。</p><p>输入以下一下命令安装Hexo<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br><span class="line">可能会安装失败（这是我遇到的第一个坑），安装失败选择下边这种方式(淘宝源安装):</span><br><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br><span class="line">cnpm install hexo-cli -g</span><br><span class="line">Hexo安装完成之后，输入下面指令初始化Hexo</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure></p><h1 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h1><p>在你刚才新建的空文件夹（blog）下右键选择<code>Git Bash</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean # 清除历史生成的静态文件</span><br><span class="line">hexo generate # 生成静态文件(简写：hexo g)</span><br><span class="line">hexo server # 启动本地服务(简写: hexo s)</span><br></pre></td></tr></table></figure></p><p> 一顿操作猛如虎以后，看到下面这条指令，代表服务开启成功，<em>浏览器中输入以下网站</em>就可以看到刚刚搭建的静态网页。<br> <code>INFO  Start processing</code><br><code>INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code></p><h1 id="Coding-pages-设置"><a href="#Coding-pages-设置" class="headerlink" title="Coding pages 设置"></a>Coding pages 设置</h1><p>现在我们已经在本地搭建好了我们的博客，麻溜儿部署起来让大家看到。</p><p>先打开<a href="https://coding.net/" target="_blank" rel="noopener">coding</a>,右上角注册一下。</p><h2 id="创建一个新仓库"><a href="#创建一个新仓库" class="headerlink" title="创建一个新仓库"></a>创建一个新仓库</h2><figure class="image-box">                <img src="0.png" alt="[ 创建新仓库 ]" title="" class="">                <p>[ 创建新仓库 ]</p>            </figure><p><img src="1.png" alt="[ 注意仓库名的格式是固定的，用户名+coding.me 不一致会出错 ]"></p><h2 id="开启静态pages"><a href="#开启静态pages" class="headerlink" title="开启静态pages"></a>开启静态pages</h2><p><img src="2.png" alt="[这是开启展示功能 ]"></p><h3 id="绑定个人域名，如果不需要可直接跳到添加部署密钥"><a href="#绑定个人域名，如果不需要可直接跳到添加部署密钥" class="headerlink" title="绑定个人域名，如果不需要可直接跳到添加部署密钥"></a>绑定个人域名，如果不需要可直接跳到添加部署密钥</h3><figure class="image-box">                <img src="3.png" alt="[点击设置]" title="" class="">                <p>[点击设置]</p>            </figure><figure class="image-box">                <img src="4.png" alt="[将你的个人域名输入 ]" title="" class="">                <p>[将你的个人域名输入 ]</p>            </figure><blockquote><p>注意个人域名的解析参考 <a href="https://coding.net/help/doc/pages/domain.html" target="_blank" rel="noopener">coding 官方帮助文档</a></p></blockquote><h2 id="添加部署密钥"><a href="#添加部署密钥" class="headerlink" title="添加部署密钥"></a>添加部署密钥</h2><p>打开<code>Git bash</code>，输入<code>ssh-keygen -t rsa -C &quot;897691781@qq.com</code>“,这个邮箱地址换成你的。连续四次回车就生成了一对密钥。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/韓仁輝/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/韓仁輝/.ssh/id_rsa.pub.</span><br></pre></td></tr></table></figure></p><p>它会告诉你密钥生成在那个文件夹,上面是我的密钥生成路径，下面要相应替换成你的，使用cat来查看公钥内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /c/Users/韓仁輝/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>复制输出的内容，打开<code>coding</code>你刚刚创建的项目，点击页面左侧设置里的部署公钥，点击新建公钥，把你刚刚复制的内容粘贴进去就可以了。</p><h1 id="git部署静态界面"><a href="#git部署静态界面" class="headerlink" title="git部署静态界面"></a>git部署静态界面</h1><p>通过git将你的静态页面push到你刚刚创建的coding pages上去</p><p>还是在<code>blog</code>根目录下，右键<code>Git Bash</code>，输入以下指令安装一个hexo的部署工具<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>安装完成以后，需要配置部署路径，打开blog文件夹下的<code>_config.yml</code>（打开方式别选记事本，编码不支持中文），下滑找到<code>deploy:</code>，将deploy修改为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repo:  git@git.coding.net:HanRenHui/HanRenHui.coding.me.git #注意将用户名换为你自己的</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>别忘记<code>ctril+s</code>保存一下，还是在<code>blog/</code>目录下，用hexo命令完成最终部署：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br><span class="line"># 2 3可以简写为 hexo g -d</span><br></pre></td></tr></table></figure></p><p>恭喜，打开浏览器在地址栏输入用户名.coding.me（有个人域名直接输入个人域名）就可以访问自己的博客啦!!!</p>]]></content>
      
      <categories>
          
          <category> 教程 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2018/08/04/hello-world/"/>
      <url>/blog/2018/08/04/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
